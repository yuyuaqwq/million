// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/db_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_db_2fdb_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_db_2fdb_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "db/db_options.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_db_2fdb_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_db_2fdb_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_db_2fdb_5fuser_2eproto;
namespace Db {
class User;
struct UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace Db
PROTOBUF_NAMESPACE_OPEN
template<> ::Db::User* Arena::CreateMaybeMessage<::Db::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Db {

// ===================================================================

class User final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Db.User) */ {
 public:
  inline User() : User(nullptr) {}
  ~User() override;
  explicit PROTOBUF_CONSTEXPR User(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const User& default_instance() {
    return *internal_default_instance();
  }
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<User>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const User& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const User& from) {
    User::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Db.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEmailFieldNumber = 3,
    kPasswordHashFieldNumber = 5,
    kPhoneNumberFieldNumber = 6,
    kCreatedAtFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kIdFieldNumber = 1,
    kRoleIdFieldNumber = 4,
    kIsActiveFieldNumber = 7,
  };
  // string name = 2 [(.Db.column) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 3 [(.Db.column) = {
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string password_hash = 5 [(.Db.column) = {
  void clear_password_hash();
  const std::string& password_hash() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password_hash(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password_hash();
  PROTOBUF_NODISCARD std::string* release_password_hash();
  void set_allocated_password_hash(std::string* password_hash);
  private:
  const std::string& _internal_password_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password_hash(const std::string& value);
  std::string* _internal_mutable_password_hash();
  public:

  // string phone_number = 6 [(.Db.column) = {
  void clear_phone_number();
  const std::string& phone_number() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_phone_number(ArgT0&& arg0, ArgT... args);
  std::string* mutable_phone_number();
  PROTOBUF_NODISCARD std::string* release_phone_number();
  void set_allocated_phone_number(std::string* phone_number);
  private:
  const std::string& _internal_phone_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phone_number(const std::string& value);
  std::string* _internal_mutable_phone_number();
  public:

  // string created_at = 8 [(.Db.column) = {
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 9 [(.Db.column) = {
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_NODISCARD std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // int64 id = 1 [(.Db.column) = {
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int32 role_id = 4 [(.Db.column) = {
  void clear_role_id();
  int32_t role_id() const;
  void set_role_id(int32_t value);
  private:
  int32_t _internal_role_id() const;
  void _internal_set_role_id(int32_t value);
  public:

  // bool is_active = 7 [(.Db.column) = {
  void clear_is_active();
  bool is_active() const;
  void set_is_active(bool value);
  private:
  bool _internal_is_active() const;
  void _internal_set_is_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Db.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
    int64_t id_;
    int32_t role_id_;
    bool is_active_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_db_2fdb_5fuser_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// User

// int64 id = 1 [(.Db.column) = {
inline void User::clear_id() {
  _impl_.id_ = int64_t{0};
}
inline int64_t User::_internal_id() const {
  return _impl_.id_;
}
inline int64_t User::id() const {
  // @@protoc_insertion_point(field_get:Db.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(int64_t value) {
  
  _impl_.id_ = value;
}
inline void User::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Db.User.id)
}

// string name = 2 [(.Db.column) = {
inline void User::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& User::name() const {
  // @@protoc_insertion_point(field_get:Db.User.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.name)
}
inline std::string* User::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:Db.User.name)
  return _s;
}
inline const std::string& User::_internal_name() const {
  return _impl_.name_.Get();
}
inline void User::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:Db.User.name)
  return _impl_.name_.Release();
}
inline void User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.name)
}

// string email = 3 [(.Db.column) = {
inline void User::clear_email() {
  _impl_.email_.ClearToEmpty();
}
inline const std::string& User::email() const {
  // @@protoc_insertion_point(field_get:Db.User.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_email(ArgT0&& arg0, ArgT... args) {
 
 _impl_.email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.email)
}
inline std::string* User::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:Db.User.email)
  return _s;
}
inline const std::string& User::_internal_email() const {
  return _impl_.email_.Get();
}
inline void User::_internal_set_email(const std::string& value) {
  
  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_email() {
  
  return _impl_.email_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_email() {
  // @@protoc_insertion_point(field_release:Db.User.email)
  return _impl_.email_.Release();
}
inline void User::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  _impl_.email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.email_.IsDefault()) {
    _impl_.email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.email)
}

// int32 role_id = 4 [(.Db.column) = {
inline void User::clear_role_id() {
  _impl_.role_id_ = 0;
}
inline int32_t User::_internal_role_id() const {
  return _impl_.role_id_;
}
inline int32_t User::role_id() const {
  // @@protoc_insertion_point(field_get:Db.User.role_id)
  return _internal_role_id();
}
inline void User::_internal_set_role_id(int32_t value) {
  
  _impl_.role_id_ = value;
}
inline void User::set_role_id(int32_t value) {
  _internal_set_role_id(value);
  // @@protoc_insertion_point(field_set:Db.User.role_id)
}

// string password_hash = 5 [(.Db.column) = {
inline void User::clear_password_hash() {
  _impl_.password_hash_.ClearToEmpty();
}
inline const std::string& User::password_hash() const {
  // @@protoc_insertion_point(field_get:Db.User.password_hash)
  return _internal_password_hash();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_password_hash(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_hash_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.password_hash)
}
inline std::string* User::mutable_password_hash() {
  std::string* _s = _internal_mutable_password_hash();
  // @@protoc_insertion_point(field_mutable:Db.User.password_hash)
  return _s;
}
inline const std::string& User::_internal_password_hash() const {
  return _impl_.password_hash_.Get();
}
inline void User::_internal_set_password_hash(const std::string& value) {
  
  _impl_.password_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_password_hash() {
  
  return _impl_.password_hash_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_password_hash() {
  // @@protoc_insertion_point(field_release:Db.User.password_hash)
  return _impl_.password_hash_.Release();
}
inline void User::set_allocated_password_hash(std::string* password_hash) {
  if (password_hash != nullptr) {
    
  } else {
    
  }
  _impl_.password_hash_.SetAllocated(password_hash, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_hash_.IsDefault()) {
    _impl_.password_hash_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.password_hash)
}

// string phone_number = 6 [(.Db.column) = {
inline void User::clear_phone_number() {
  _impl_.phone_number_.ClearToEmpty();
}
inline const std::string& User::phone_number() const {
  // @@protoc_insertion_point(field_get:Db.User.phone_number)
  return _internal_phone_number();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_phone_number(ArgT0&& arg0, ArgT... args) {
 
 _impl_.phone_number_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.phone_number)
}
inline std::string* User::mutable_phone_number() {
  std::string* _s = _internal_mutable_phone_number();
  // @@protoc_insertion_point(field_mutable:Db.User.phone_number)
  return _s;
}
inline const std::string& User::_internal_phone_number() const {
  return _impl_.phone_number_.Get();
}
inline void User::_internal_set_phone_number(const std::string& value) {
  
  _impl_.phone_number_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_phone_number() {
  
  return _impl_.phone_number_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_phone_number() {
  // @@protoc_insertion_point(field_release:Db.User.phone_number)
  return _impl_.phone_number_.Release();
}
inline void User::set_allocated_phone_number(std::string* phone_number) {
  if (phone_number != nullptr) {
    
  } else {
    
  }
  _impl_.phone_number_.SetAllocated(phone_number, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.phone_number_.IsDefault()) {
    _impl_.phone_number_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.phone_number)
}

// bool is_active = 7 [(.Db.column) = {
inline void User::clear_is_active() {
  _impl_.is_active_ = false;
}
inline bool User::_internal_is_active() const {
  return _impl_.is_active_;
}
inline bool User::is_active() const {
  // @@protoc_insertion_point(field_get:Db.User.is_active)
  return _internal_is_active();
}
inline void User::_internal_set_is_active(bool value) {
  
  _impl_.is_active_ = value;
}
inline void User::set_is_active(bool value) {
  _internal_set_is_active(value);
  // @@protoc_insertion_point(field_set:Db.User.is_active)
}

// string created_at = 8 [(.Db.column) = {
inline void User::clear_created_at() {
  _impl_.created_at_.ClearToEmpty();
}
inline const std::string& User::created_at() const {
  // @@protoc_insertion_point(field_get:Db.User.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.created_at)
}
inline std::string* User::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:Db.User.created_at)
  return _s;
}
inline const std::string& User::_internal_created_at() const {
  return _impl_.created_at_.Get();
}
inline void User::_internal_set_created_at(const std::string& value) {
  
  _impl_.created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_created_at() {
  
  return _impl_.created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_created_at() {
  // @@protoc_insertion_point(field_release:Db.User.created_at)
  return _impl_.created_at_.Release();
}
inline void User::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  _impl_.created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_at_.IsDefault()) {
    _impl_.created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.created_at)
}

// string updated_at = 9 [(.Db.column) = {
inline void User::clear_updated_at() {
  _impl_.updated_at_.ClearToEmpty();
}
inline const std::string& User::updated_at() const {
  // @@protoc_insertion_point(field_get:Db.User.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void User::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updated_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Db.User.updated_at)
}
inline std::string* User::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:Db.User.updated_at)
  return _s;
}
inline const std::string& User::_internal_updated_at() const {
  return _impl_.updated_at_.Get();
}
inline void User::_internal_set_updated_at(const std::string& value) {
  
  _impl_.updated_at_.Set(value, GetArenaForAllocation());
}
inline std::string* User::_internal_mutable_updated_at() {
  
  return _impl_.updated_at_.Mutable(GetArenaForAllocation());
}
inline std::string* User::release_updated_at() {
  // @@protoc_insertion_point(field_release:Db.User.updated_at)
  return _impl_.updated_at_.Release();
}
inline void User::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  _impl_.updated_at_.SetAllocated(updated_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updated_at_.IsDefault()) {
    _impl_.updated_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Db.User.updated_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Db

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_db_2fdb_5fuser_2eproto
