// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db/db_options.proto

#include "db/db_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Db {
PROTOBUF_CONSTEXPR DbSqlOptions::DbSqlOptions(
    ::_pbi::ConstantInitialized) {}
struct DbSqlOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbSqlOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbSqlOptionsDefaultTypeInternal() {}
  union {
    DbSqlOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbSqlOptionsDefaultTypeInternal _DbSqlOptions_default_instance_;
PROTOBUF_CONSTEXPR DbCacheOptions::DbCacheOptions(
    ::_pbi::ConstantInitialized) {}
struct DbCacheOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DbCacheOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DbCacheOptionsDefaultTypeInternal() {}
  union {
    DbCacheOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DbCacheOptionsDefaultTypeInternal _DbCacheOptions_default_instance_;
PROTOBUF_CONSTEXPR ForeignKey::ForeignKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.referenced_table_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.referenced_column_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.on_delete_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.on_update_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ForeignKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ForeignKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ForeignKeyDefaultTypeInternal() {}
  union {
    ForeignKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ForeignKeyDefaultTypeInternal _ForeignKey_default_instance_;
PROTOBUF_CONSTEXPR TableSqlOptions::TableSqlOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.composite_key_)*/{}
  , /*decltype(_impl_.foreign_keys_)*/{}
  , /*decltype(_impl_.charset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.engine_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.auto_increment_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableSqlOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSqlOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSqlOptionsDefaultTypeInternal() {}
  union {
    TableSqlOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSqlOptionsDefaultTypeInternal _TableSqlOptions_default_instance_;
PROTOBUF_CONSTEXPR TableCacheOptions::TableCacheOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ttl_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableCacheOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableCacheOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableCacheOptionsDefaultTypeInternal() {}
  union {
    TableCacheOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableCacheOptionsDefaultTypeInternal _TableCacheOptions_default_instance_;
PROTOBUF_CONSTEXPR MessageOptionsTable::MessageOptionsTable(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sql_)*/nullptr
  , /*decltype(_impl_.cache_)*/nullptr
  , /*decltype(_impl_.tick_second_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MessageOptionsTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MessageOptionsTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MessageOptionsTableDefaultTypeInternal() {}
  union {
    MessageOptionsTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOptionsTableDefaultTypeInternal _MessageOptionsTable_default_instance_;
PROTOBUF_CONSTEXPR ColumnSqlOptions::ColumnSqlOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.default_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.comment_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.primary_key_)*/false
  , /*decltype(_impl_.index_)*/false
  , /*decltype(_impl_.unique_)*/false
  , /*decltype(_impl_.auto_increment_)*/false
  , /*decltype(_impl_.not_null_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnSqlOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnSqlOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnSqlOptionsDefaultTypeInternal() {}
  union {
    ColumnSqlOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnSqlOptionsDefaultTypeInternal _ColumnSqlOptions_default_instance_;
PROTOBUF_CONSTEXPR ColumnCacheOptions::ColumnCacheOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnCacheOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnCacheOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnCacheOptionsDefaultTypeInternal() {}
  union {
    ColumnCacheOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnCacheOptionsDefaultTypeInternal _ColumnCacheOptions_default_instance_;
PROTOBUF_CONSTEXPR FieldOptionsColumn::FieldOptionsColumn(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sql_)*/nullptr
  , /*decltype(_impl_.cache_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FieldOptionsColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FieldOptionsColumnDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FieldOptionsColumnDefaultTypeInternal() {}
  union {
    FieldOptionsColumn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FieldOptionsColumnDefaultTypeInternal _FieldOptionsColumn_default_instance_;
}  // namespace Db
static ::_pb::Metadata file_level_metadata_db_2fdb_5foptions_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_db_2fdb_5foptions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_db_2fdb_5foptions_2eproto = nullptr;

const uint32_t TableStruct_db_2fdb_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::DbSqlOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::DbCacheOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _impl_.referenced_table_),
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _impl_.referenced_column_),
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _impl_.on_delete_),
  PROTOBUF_FIELD_OFFSET(::Db::ForeignKey, _impl_.on_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _impl_.charset_),
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _impl_.engine_),
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _impl_.composite_key_),
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _impl_.foreign_keys_),
  PROTOBUF_FIELD_OFFSET(::Db::TableSqlOptions, _impl_.auto_increment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::TableCacheOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::TableCacheOptions, _impl_.ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::MessageOptionsTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::MessageOptionsTable, _impl_.sql_),
  PROTOBUF_FIELD_OFFSET(::Db::MessageOptionsTable, _impl_.cache_),
  PROTOBUF_FIELD_OFFSET(::Db::MessageOptionsTable, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::Db::MessageOptionsTable, _impl_.tick_second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.primary_key_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.unique_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.auto_increment_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.default_value_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.comment_),
  PROTOBUF_FIELD_OFFSET(::Db::ColumnSqlOptions, _impl_.not_null_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::ColumnCacheOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::ColumnCacheOptions, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Db::FieldOptionsColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Db::FieldOptionsColumn, _impl_.sql_),
  PROTOBUF_FIELD_OFFSET(::Db::FieldOptionsColumn, _impl_.cache_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Db::DbSqlOptions)},
  { 6, -1, -1, sizeof(::Db::DbCacheOptions)},
  { 12, -1, -1, sizeof(::Db::ForeignKey)},
  { 23, -1, -1, sizeof(::Db::TableSqlOptions)},
  { 34, -1, -1, sizeof(::Db::TableCacheOptions)},
  { 41, -1, -1, sizeof(::Db::MessageOptionsTable)},
  { 51, -1, -1, sizeof(::Db::ColumnSqlOptions)},
  { 64, -1, -1, sizeof(::Db::ColumnCacheOptions)},
  { 71, -1, -1, sizeof(::Db::FieldOptionsColumn)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Db::_DbSqlOptions_default_instance_._instance,
  &::Db::_DbCacheOptions_default_instance_._instance,
  &::Db::_ForeignKey_default_instance_._instance,
  &::Db::_TableSqlOptions_default_instance_._instance,
  &::Db::_TableCacheOptions_default_instance_._instance,
  &::Db::_MessageOptionsTable_default_instance_._instance,
  &::Db::_ColumnSqlOptions_default_instance_._instance,
  &::Db::_ColumnCacheOptions_default_instance_._instance,
  &::Db::_FieldOptionsColumn_default_instance_._instance,
};

const char descriptor_table_protodef_db_2fdb_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023db/db_options.proto\022\002Db\032 google/protob"
  "uf/descriptor.proto\"\016\n\014DbSqlOptions\"\020\n\016D"
  "bCacheOptions\"w\n\nForeignKey\022\016\n\006column\030\001 "
  "\001(\t\022\030\n\020referenced_table\030\002 \001(\t\022\031\n\021referen"
  "ced_column\030\003 \001(\t\022\021\n\ton_delete\030\004 \001(\t\022\021\n\to"
  "n_update\030\005 \001(\t\"\207\001\n\017TableSqlOptions\022\017\n\007ch"
  "arset\030\001 \001(\t\022\016\n\006engine\030\002 \001(\t\022\025\n\rcomposite"
  "_key\030\003 \003(\t\022$\n\014foreign_keys\030\004 \003(\0132\016.Db.Fo"
  "reignKey\022\026\n\016auto_increment\030\005 \001(\010\" \n\021Tabl"
  "eCacheOptions\022\013\n\003ttl\030\001 \001(\005\"\200\001\n\023MessageOp"
  "tionsTable\022 \n\003sql\030\001 \001(\0132\023.Db.TableSqlOpt"
  "ions\022$\n\005cache\030\002 \001(\0132\025.Db.TableCacheOptio"
  "ns\022\014\n\004name\030\003 \001(\t\022\023\n\013tick_second\030\004 \001(\005\"\230\001"
  "\n\020ColumnSqlOptions\022\023\n\013primary_key\030\001 \001(\010\022"
  "\r\n\005index\030\002 \001(\010\022\016\n\006unique\030\003 \001(\010\022\026\n\016auto_i"
  "ncrement\030\004 \001(\010\022\025\n\rdefault_value\030\005 \001(\t\022\017\n"
  "\007comment\030\006 \001(\t\022\020\n\010not_null\030\007 \001(\010\"#\n\022Colu"
  "mnCacheOptions\022\r\n\005index\030\001 \001(\010\"^\n\022FieldOp"
  "tionsColumn\022!\n\003sql\030\001 \001(\0132\024.Db.ColumnSqlO"
  "ptions\022%\n\005cache\030\002 \001(\0132\026.Db.ColumnCacheOp"
  "tions:=\n\003sql\022\034.google.protobuf.FileOptio"
  "ns\030\241\234\001 \001(\0132\020.Db.DbSqlOptions:A\n\005cache\022\034."
  "google.protobuf.FileOptions\030\242\234\001 \001(\0132\022.Db"
  ".DbCacheOptions:,\n\004name\022\034.google.protobu"
  "f.FileOptions\030\243\234\001 \001(\t:I\n\005table\022\037.google."
  "protobuf.MessageOptions\030\241\234\001 \001(\0132\027.Db.Mes"
  "sageOptionsTable:G\n\006column\022\035.google.prot"
  "obuf.FieldOptions\030\241\234\001 \001(\0132\026.Db.FieldOpti"
  "onsColumnb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_db_2fdb_5foptions_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::_pbi::once_flag descriptor_table_db_2fdb_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_db_2fdb_5foptions_2eproto = {
    false, false, 1137, descriptor_table_protodef_db_2fdb_5foptions_2eproto,
    "db/db_options.proto",
    &descriptor_table_db_2fdb_5foptions_2eproto_once, descriptor_table_db_2fdb_5foptions_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_db_2fdb_5foptions_2eproto::offsets,
    file_level_metadata_db_2fdb_5foptions_2eproto, file_level_enum_descriptors_db_2fdb_5foptions_2eproto,
    file_level_service_descriptors_db_2fdb_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_db_2fdb_5foptions_2eproto_getter() {
  return &descriptor_table_db_2fdb_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_db_2fdb_5foptions_2eproto(&descriptor_table_db_2fdb_5foptions_2eproto);
namespace Db {

// ===================================================================

class DbSqlOptions::_Internal {
 public:
};

DbSqlOptions::DbSqlOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Db.DbSqlOptions)
}
DbSqlOptions::DbSqlOptions(const DbSqlOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DbSqlOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Db.DbSqlOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbSqlOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbSqlOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DbSqlOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[0]);
}

// ===================================================================

class DbCacheOptions::_Internal {
 public:
};

DbCacheOptions::DbCacheOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Db.DbCacheOptions)
}
DbCacheOptions::DbCacheOptions(const DbCacheOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DbCacheOptions* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Db.DbCacheOptions)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DbCacheOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DbCacheOptions::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DbCacheOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[1]);
}

// ===================================================================

class ForeignKey::_Internal {
 public:
};

ForeignKey::ForeignKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.ForeignKey)
}
ForeignKey::ForeignKey(const ForeignKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ForeignKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_){}
    , decltype(_impl_.referenced_table_){}
    , decltype(_impl_.referenced_column_){}
    , decltype(_impl_.on_delete_){}
    , decltype(_impl_.on_update_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_column().empty()) {
    _this->_impl_.column_.Set(from._internal_column(), 
      _this->GetArenaForAllocation());
  }
  _impl_.referenced_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.referenced_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_referenced_table().empty()) {
    _this->_impl_.referenced_table_.Set(from._internal_referenced_table(), 
      _this->GetArenaForAllocation());
  }
  _impl_.referenced_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.referenced_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_referenced_column().empty()) {
    _this->_impl_.referenced_column_.Set(from._internal_referenced_column(), 
      _this->GetArenaForAllocation());
  }
  _impl_.on_delete_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.on_delete_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_on_delete().empty()) {
    _this->_impl_.on_delete_.Set(from._internal_on_delete(), 
      _this->GetArenaForAllocation());
  }
  _impl_.on_update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.on_update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_on_update().empty()) {
    _this->_impl_.on_update_.Set(from._internal_on_update(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Db.ForeignKey)
}

inline void ForeignKey::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_){}
    , decltype(_impl_.referenced_table_){}
    , decltype(_impl_.referenced_column_){}
    , decltype(_impl_.on_delete_){}
    , decltype(_impl_.on_update_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.referenced_table_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.referenced_table_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.referenced_column_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.referenced_column_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.on_delete_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.on_delete_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.on_update_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.on_update_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ForeignKey::~ForeignKey() {
  // @@protoc_insertion_point(destructor:Db.ForeignKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ForeignKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.Destroy();
  _impl_.referenced_table_.Destroy();
  _impl_.referenced_column_.Destroy();
  _impl_.on_delete_.Destroy();
  _impl_.on_update_.Destroy();
}

void ForeignKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ForeignKey::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.ForeignKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.ClearToEmpty();
  _impl_.referenced_table_.ClearToEmpty();
  _impl_.referenced_column_.ClearToEmpty();
  _impl_.on_delete_.ClearToEmpty();
  _impl_.on_update_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ForeignKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ForeignKey.column"));
        } else
          goto handle_unusual;
        continue;
      // string referenced_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_referenced_table();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ForeignKey.referenced_table"));
        } else
          goto handle_unusual;
        continue;
      // string referenced_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_referenced_column();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ForeignKey.referenced_column"));
        } else
          goto handle_unusual;
        continue;
      // string on_delete = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_on_delete();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ForeignKey.on_delete"));
        } else
          goto handle_unusual;
        continue;
      // string on_update = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_on_update();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ForeignKey.on_update"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ForeignKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.ForeignKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_column().data(), static_cast<int>(this->_internal_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ForeignKey.column");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_column(), target);
  }

  // string referenced_table = 2;
  if (!this->_internal_referenced_table().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referenced_table().data(), static_cast<int>(this->_internal_referenced_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ForeignKey.referenced_table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_referenced_table(), target);
  }

  // string referenced_column = 3;
  if (!this->_internal_referenced_column().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referenced_column().data(), static_cast<int>(this->_internal_referenced_column().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ForeignKey.referenced_column");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_referenced_column(), target);
  }

  // string on_delete = 4;
  if (!this->_internal_on_delete().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_on_delete().data(), static_cast<int>(this->_internal_on_delete().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ForeignKey.on_delete");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_on_delete(), target);
  }

  // string on_update = 5;
  if (!this->_internal_on_update().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_on_update().data(), static_cast<int>(this->_internal_on_update().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ForeignKey.on_update");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_on_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.ForeignKey)
  return target;
}

size_t ForeignKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.ForeignKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string column = 1;
  if (!this->_internal_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_column());
  }

  // string referenced_table = 2;
  if (!this->_internal_referenced_table().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referenced_table());
  }

  // string referenced_column = 3;
  if (!this->_internal_referenced_column().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referenced_column());
  }

  // string on_delete = 4;
  if (!this->_internal_on_delete().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_on_delete());
  }

  // string on_update = 5;
  if (!this->_internal_on_update().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_on_update());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ForeignKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ForeignKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ForeignKey::GetClassData() const { return &_class_data_; }


void ForeignKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ForeignKey*>(&to_msg);
  auto& from = static_cast<const ForeignKey&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.ForeignKey)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_column().empty()) {
    _this->_internal_set_column(from._internal_column());
  }
  if (!from._internal_referenced_table().empty()) {
    _this->_internal_set_referenced_table(from._internal_referenced_table());
  }
  if (!from._internal_referenced_column().empty()) {
    _this->_internal_set_referenced_column(from._internal_referenced_column());
  }
  if (!from._internal_on_delete().empty()) {
    _this->_internal_set_on_delete(from._internal_on_delete());
  }
  if (!from._internal_on_update().empty()) {
    _this->_internal_set_on_update(from._internal_on_update());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ForeignKey::CopyFrom(const ForeignKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.ForeignKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForeignKey::IsInitialized() const {
  return true;
}

void ForeignKey::InternalSwap(ForeignKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.column_, lhs_arena,
      &other->_impl_.column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.referenced_table_, lhs_arena,
      &other->_impl_.referenced_table_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.referenced_column_, lhs_arena,
      &other->_impl_.referenced_column_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.on_delete_, lhs_arena,
      &other->_impl_.on_delete_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.on_update_, lhs_arena,
      &other->_impl_.on_update_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ForeignKey::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[2]);
}

// ===================================================================

class TableSqlOptions::_Internal {
 public:
};

TableSqlOptions::TableSqlOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.TableSqlOptions)
}
TableSqlOptions::TableSqlOptions(const TableSqlOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSqlOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.composite_key_){from._impl_.composite_key_}
    , decltype(_impl_.foreign_keys_){from._impl_.foreign_keys_}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.auto_increment_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_charset().empty()) {
    _this->_impl_.charset_.Set(from._internal_charset(), 
      _this->GetArenaForAllocation());
  }
  _impl_.engine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_engine().empty()) {
    _this->_impl_.engine_.Set(from._internal_engine(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.auto_increment_ = from._impl_.auto_increment_;
  // @@protoc_insertion_point(copy_constructor:Db.TableSqlOptions)
}

inline void TableSqlOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.composite_key_){arena}
    , decltype(_impl_.foreign_keys_){arena}
    , decltype(_impl_.charset_){}
    , decltype(_impl_.engine_){}
    , decltype(_impl_.auto_increment_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.charset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.charset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.engine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.engine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableSqlOptions::~TableSqlOptions() {
  // @@protoc_insertion_point(destructor:Db.TableSqlOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSqlOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.composite_key_.~RepeatedPtrField();
  _impl_.foreign_keys_.~RepeatedPtrField();
  _impl_.charset_.Destroy();
  _impl_.engine_.Destroy();
}

void TableSqlOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSqlOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.TableSqlOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.composite_key_.Clear();
  _impl_.foreign_keys_.Clear();
  _impl_.charset_.ClearToEmpty();
  _impl_.engine_.ClearToEmpty();
  _impl_.auto_increment_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSqlOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string charset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_charset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.TableSqlOptions.charset"));
        } else
          goto handle_unusual;
        continue;
      // string engine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_engine();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.TableSqlOptions.engine"));
        } else
          goto handle_unusual;
        continue;
      // repeated string composite_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_composite_key();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "Db.TableSqlOptions.composite_key"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .Db.ForeignKey foreign_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_foreign_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool auto_increment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.auto_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSqlOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.TableSqlOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string charset = 1;
  if (!this->_internal_charset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_charset().data(), static_cast<int>(this->_internal_charset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.TableSqlOptions.charset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_charset(), target);
  }

  // string engine = 2;
  if (!this->_internal_engine().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_engine().data(), static_cast<int>(this->_internal_engine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.TableSqlOptions.engine");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_engine(), target);
  }

  // repeated string composite_key = 3;
  for (int i = 0, n = this->_internal_composite_key_size(); i < n; i++) {
    const auto& s = this->_internal_composite_key(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.TableSqlOptions.composite_key");
    target = stream->WriteString(3, s, target);
  }

  // repeated .Db.ForeignKey foreign_keys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_foreign_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_foreign_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool auto_increment = 5;
  if (this->_internal_auto_increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_auto_increment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.TableSqlOptions)
  return target;
}

size_t TableSqlOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.TableSqlOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string composite_key = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.composite_key_.size());
  for (int i = 0, n = _impl_.composite_key_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.composite_key_.Get(i));
  }

  // repeated .Db.ForeignKey foreign_keys = 4;
  total_size += 1UL * this->_internal_foreign_keys_size();
  for (const auto& msg : this->_impl_.foreign_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string charset = 1;
  if (!this->_internal_charset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_charset());
  }

  // string engine = 2;
  if (!this->_internal_engine().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_engine());
  }

  // bool auto_increment = 5;
  if (this->_internal_auto_increment() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSqlOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSqlOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSqlOptions::GetClassData() const { return &_class_data_; }


void TableSqlOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSqlOptions*>(&to_msg);
  auto& from = static_cast<const TableSqlOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.TableSqlOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.composite_key_.MergeFrom(from._impl_.composite_key_);
  _this->_impl_.foreign_keys_.MergeFrom(from._impl_.foreign_keys_);
  if (!from._internal_charset().empty()) {
    _this->_internal_set_charset(from._internal_charset());
  }
  if (!from._internal_engine().empty()) {
    _this->_internal_set_engine(from._internal_engine());
  }
  if (from._internal_auto_increment() != 0) {
    _this->_internal_set_auto_increment(from._internal_auto_increment());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSqlOptions::CopyFrom(const TableSqlOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.TableSqlOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSqlOptions::IsInitialized() const {
  return true;
}

void TableSqlOptions::InternalSwap(TableSqlOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.composite_key_.InternalSwap(&other->_impl_.composite_key_);
  _impl_.foreign_keys_.InternalSwap(&other->_impl_.foreign_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.charset_, lhs_arena,
      &other->_impl_.charset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.engine_, lhs_arena,
      &other->_impl_.engine_, rhs_arena
  );
  swap(_impl_.auto_increment_, other->_impl_.auto_increment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSqlOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[3]);
}

// ===================================================================

class TableCacheOptions::_Internal {
 public:
};

TableCacheOptions::TableCacheOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.TableCacheOptions)
}
TableCacheOptions::TableCacheOptions(const TableCacheOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableCacheOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.ttl_ = from._impl_.ttl_;
  // @@protoc_insertion_point(copy_constructor:Db.TableCacheOptions)
}

inline void TableCacheOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ttl_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TableCacheOptions::~TableCacheOptions() {
  // @@protoc_insertion_point(destructor:Db.TableCacheOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableCacheOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableCacheOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableCacheOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.TableCacheOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ttl_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCacheOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ttl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableCacheOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.TableCacheOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ttl = 1;
  if (this->_internal_ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ttl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.TableCacheOptions)
  return target;
}

size_t TableCacheOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.TableCacheOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ttl = 1;
  if (this->_internal_ttl() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ttl());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableCacheOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableCacheOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableCacheOptions::GetClassData() const { return &_class_data_; }


void TableCacheOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableCacheOptions*>(&to_msg);
  auto& from = static_cast<const TableCacheOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.TableCacheOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ttl() != 0) {
    _this->_internal_set_ttl(from._internal_ttl());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableCacheOptions::CopyFrom(const TableCacheOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.TableCacheOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCacheOptions::IsInitialized() const {
  return true;
}

void TableCacheOptions::InternalSwap(TableCacheOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ttl_, other->_impl_.ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCacheOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[4]);
}

// ===================================================================

class MessageOptionsTable::_Internal {
 public:
  static const ::Db::TableSqlOptions& sql(const MessageOptionsTable* msg);
  static const ::Db::TableCacheOptions& cache(const MessageOptionsTable* msg);
};

const ::Db::TableSqlOptions&
MessageOptionsTable::_Internal::sql(const MessageOptionsTable* msg) {
  return *msg->_impl_.sql_;
}
const ::Db::TableCacheOptions&
MessageOptionsTable::_Internal::cache(const MessageOptionsTable* msg) {
  return *msg->_impl_.cache_;
}
MessageOptionsTable::MessageOptionsTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.MessageOptionsTable)
}
MessageOptionsTable::MessageOptionsTable(const MessageOptionsTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MessageOptionsTable* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sql_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , decltype(_impl_.tick_second_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_sql()) {
    _this->_impl_.sql_ = new ::Db::TableSqlOptions(*from._impl_.sql_);
  }
  if (from._internal_has_cache()) {
    _this->_impl_.cache_ = new ::Db::TableCacheOptions(*from._impl_.cache_);
  }
  _this->_impl_.tick_second_ = from._impl_.tick_second_;
  // @@protoc_insertion_point(copy_constructor:Db.MessageOptionsTable)
}

inline void MessageOptionsTable::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sql_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , decltype(_impl_.tick_second_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MessageOptionsTable::~MessageOptionsTable() {
  // @@protoc_insertion_point(destructor:Db.MessageOptionsTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MessageOptionsTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.sql_;
  if (this != internal_default_instance()) delete _impl_.cache_;
}

void MessageOptionsTable::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MessageOptionsTable::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.MessageOptionsTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.sql_ != nullptr) {
    delete _impl_.sql_;
  }
  _impl_.sql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cache_ != nullptr) {
    delete _impl_.cache_;
  }
  _impl_.cache_ = nullptr;
  _impl_.tick_second_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageOptionsTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Db.TableSqlOptions sql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Db.TableCacheOptions cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.MessageOptionsTable.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 tick_second = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tick_second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageOptionsTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.MessageOptionsTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Db.TableSqlOptions sql = 1;
  if (this->_internal_has_sql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sql(this),
        _Internal::sql(this).GetCachedSize(), target, stream);
  }

  // .Db.TableCacheOptions cache = 2;
  if (this->_internal_has_cache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cache(this),
        _Internal::cache(this).GetCachedSize(), target, stream);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.MessageOptionsTable.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // int32 tick_second = 4;
  if (this->_internal_tick_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tick_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.MessageOptionsTable)
  return target;
}

size_t MessageOptionsTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.MessageOptionsTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .Db.TableSqlOptions sql = 1;
  if (this->_internal_has_sql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sql_);
  }

  // .Db.TableCacheOptions cache = 2;
  if (this->_internal_has_cache()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cache_);
  }

  // int32 tick_second = 4;
  if (this->_internal_tick_second() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tick_second());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOptionsTable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MessageOptionsTable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageOptionsTable::GetClassData() const { return &_class_data_; }


void MessageOptionsTable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MessageOptionsTable*>(&to_msg);
  auto& from = static_cast<const MessageOptionsTable&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.MessageOptionsTable)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_sql()) {
    _this->_internal_mutable_sql()->::Db::TableSqlOptions::MergeFrom(
        from._internal_sql());
  }
  if (from._internal_has_cache()) {
    _this->_internal_mutable_cache()->::Db::TableCacheOptions::MergeFrom(
        from._internal_cache());
  }
  if (from._internal_tick_second() != 0) {
    _this->_internal_set_tick_second(from._internal_tick_second());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageOptionsTable::CopyFrom(const MessageOptionsTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.MessageOptionsTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOptionsTable::IsInitialized() const {
  return true;
}

void MessageOptionsTable::InternalSwap(MessageOptionsTable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageOptionsTable, _impl_.tick_second_)
      + sizeof(MessageOptionsTable::_impl_.tick_second_)
      - PROTOBUF_FIELD_OFFSET(MessageOptionsTable, _impl_.sql_)>(
          reinterpret_cast<char*>(&_impl_.sql_),
          reinterpret_cast<char*>(&other->_impl_.sql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageOptionsTable::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[5]);
}

// ===================================================================

class ColumnSqlOptions::_Internal {
 public:
};

ColumnSqlOptions::ColumnSqlOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.ColumnSqlOptions)
}
ColumnSqlOptions::ColumnSqlOptions(const ColumnSqlOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnSqlOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.default_value_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.primary_key_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.unique_){}
    , decltype(_impl_.auto_increment_){}
    , decltype(_impl_.not_null_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_default_value().empty()) {
    _this->_impl_.default_value_.Set(from._internal_default_value(), 
      _this->GetArenaForAllocation());
  }
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_comment().empty()) {
    _this->_impl_.comment_.Set(from._internal_comment(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.primary_key_, &from._impl_.primary_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.not_null_) -
    reinterpret_cast<char*>(&_impl_.primary_key_)) + sizeof(_impl_.not_null_));
  // @@protoc_insertion_point(copy_constructor:Db.ColumnSqlOptions)
}

inline void ColumnSqlOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.default_value_){}
    , decltype(_impl_.comment_){}
    , decltype(_impl_.primary_key_){false}
    , decltype(_impl_.index_){false}
    , decltype(_impl_.unique_){false}
    , decltype(_impl_.auto_increment_){false}
    , decltype(_impl_.not_null_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.default_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.default_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.comment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.comment_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ColumnSqlOptions::~ColumnSqlOptions() {
  // @@protoc_insertion_point(destructor:Db.ColumnSqlOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnSqlOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.default_value_.Destroy();
  _impl_.comment_.Destroy();
}

void ColumnSqlOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnSqlOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.ColumnSqlOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.default_value_.ClearToEmpty();
  _impl_.comment_.ClearToEmpty();
  ::memset(&_impl_.primary_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.not_null_) -
      reinterpret_cast<char*>(&_impl_.primary_key_)) + sizeof(_impl_.not_null_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnSqlOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool primary_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.primary_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool unique = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.unique_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool auto_increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.auto_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string default_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_default_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ColumnSqlOptions.default_value"));
        } else
          goto handle_unusual;
        continue;
      // string comment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_comment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Db.ColumnSqlOptions.comment"));
        } else
          goto handle_unusual;
        continue;
      // bool not_null = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.not_null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnSqlOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.ColumnSqlOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool primary_key = 1;
  if (this->_internal_primary_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_primary_key(), target);
  }

  // bool index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_index(), target);
  }

  // bool unique = 3;
  if (this->_internal_unique() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_unique(), target);
  }

  // bool auto_increment = 4;
  if (this->_internal_auto_increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_increment(), target);
  }

  // string default_value = 5;
  if (!this->_internal_default_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_default_value().data(), static_cast<int>(this->_internal_default_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ColumnSqlOptions.default_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_default_value(), target);
  }

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Db.ColumnSqlOptions.comment");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_comment(), target);
  }

  // bool not_null = 7;
  if (this->_internal_not_null() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_not_null(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.ColumnSqlOptions)
  return target;
}

size_t ColumnSqlOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.ColumnSqlOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string default_value = 5;
  if (!this->_internal_default_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_default_value());
  }

  // string comment = 6;
  if (!this->_internal_comment().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  // bool primary_key = 1;
  if (this->_internal_primary_key() != 0) {
    total_size += 1 + 1;
  }

  // bool index = 2;
  if (this->_internal_index() != 0) {
    total_size += 1 + 1;
  }

  // bool unique = 3;
  if (this->_internal_unique() != 0) {
    total_size += 1 + 1;
  }

  // bool auto_increment = 4;
  if (this->_internal_auto_increment() != 0) {
    total_size += 1 + 1;
  }

  // bool not_null = 7;
  if (this->_internal_not_null() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnSqlOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnSqlOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnSqlOptions::GetClassData() const { return &_class_data_; }


void ColumnSqlOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnSqlOptions*>(&to_msg);
  auto& from = static_cast<const ColumnSqlOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.ColumnSqlOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_default_value().empty()) {
    _this->_internal_set_default_value(from._internal_default_value());
  }
  if (!from._internal_comment().empty()) {
    _this->_internal_set_comment(from._internal_comment());
  }
  if (from._internal_primary_key() != 0) {
    _this->_internal_set_primary_key(from._internal_primary_key());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_unique() != 0) {
    _this->_internal_set_unique(from._internal_unique());
  }
  if (from._internal_auto_increment() != 0) {
    _this->_internal_set_auto_increment(from._internal_auto_increment());
  }
  if (from._internal_not_null() != 0) {
    _this->_internal_set_not_null(from._internal_not_null());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnSqlOptions::CopyFrom(const ColumnSqlOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.ColumnSqlOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnSqlOptions::IsInitialized() const {
  return true;
}

void ColumnSqlOptions::InternalSwap(ColumnSqlOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.default_value_, lhs_arena,
      &other->_impl_.default_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.comment_, lhs_arena,
      &other->_impl_.comment_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnSqlOptions, _impl_.not_null_)
      + sizeof(ColumnSqlOptions::_impl_.not_null_)
      - PROTOBUF_FIELD_OFFSET(ColumnSqlOptions, _impl_.primary_key_)>(
          reinterpret_cast<char*>(&_impl_.primary_key_),
          reinterpret_cast<char*>(&other->_impl_.primary_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnSqlOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[6]);
}

// ===================================================================

class ColumnCacheOptions::_Internal {
 public:
};

ColumnCacheOptions::ColumnCacheOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.ColumnCacheOptions)
}
ColumnCacheOptions::ColumnCacheOptions(const ColumnCacheOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnCacheOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:Db.ColumnCacheOptions)
}

inline void ColumnCacheOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ColumnCacheOptions::~ColumnCacheOptions() {
  // @@protoc_insertion_point(destructor:Db.ColumnCacheOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnCacheOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnCacheOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnCacheOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.ColumnCacheOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnCacheOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnCacheOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.ColumnCacheOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.ColumnCacheOptions)
  return target;
}

size_t ColumnCacheOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.ColumnCacheOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool index = 1;
  if (this->_internal_index() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnCacheOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnCacheOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnCacheOptions::GetClassData() const { return &_class_data_; }


void ColumnCacheOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnCacheOptions*>(&to_msg);
  auto& from = static_cast<const ColumnCacheOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.ColumnCacheOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnCacheOptions::CopyFrom(const ColumnCacheOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.ColumnCacheOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnCacheOptions::IsInitialized() const {
  return true;
}

void ColumnCacheOptions::InternalSwap(ColumnCacheOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnCacheOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[7]);
}

// ===================================================================

class FieldOptionsColumn::_Internal {
 public:
  static const ::Db::ColumnSqlOptions& sql(const FieldOptionsColumn* msg);
  static const ::Db::ColumnCacheOptions& cache(const FieldOptionsColumn* msg);
};

const ::Db::ColumnSqlOptions&
FieldOptionsColumn::_Internal::sql(const FieldOptionsColumn* msg) {
  return *msg->_impl_.sql_;
}
const ::Db::ColumnCacheOptions&
FieldOptionsColumn::_Internal::cache(const FieldOptionsColumn* msg) {
  return *msg->_impl_.cache_;
}
FieldOptionsColumn::FieldOptionsColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Db.FieldOptionsColumn)
}
FieldOptionsColumn::FieldOptionsColumn(const FieldOptionsColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FieldOptionsColumn* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sql_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sql()) {
    _this->_impl_.sql_ = new ::Db::ColumnSqlOptions(*from._impl_.sql_);
  }
  if (from._internal_has_cache()) {
    _this->_impl_.cache_ = new ::Db::ColumnCacheOptions(*from._impl_.cache_);
  }
  // @@protoc_insertion_point(copy_constructor:Db.FieldOptionsColumn)
}

inline void FieldOptionsColumn::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sql_){nullptr}
    , decltype(_impl_.cache_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FieldOptionsColumn::~FieldOptionsColumn() {
  // @@protoc_insertion_point(destructor:Db.FieldOptionsColumn)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FieldOptionsColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sql_;
  if (this != internal_default_instance()) delete _impl_.cache_;
}

void FieldOptionsColumn::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FieldOptionsColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:Db.FieldOptionsColumn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.sql_ != nullptr) {
    delete _impl_.sql_;
  }
  _impl_.sql_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cache_ != nullptr) {
    delete _impl_.cache_;
  }
  _impl_.cache_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldOptionsColumn::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Db.ColumnSqlOptions sql = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sql(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Db.ColumnCacheOptions cache = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cache(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FieldOptionsColumn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Db.FieldOptionsColumn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Db.ColumnSqlOptions sql = 1;
  if (this->_internal_has_sql()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sql(this),
        _Internal::sql(this).GetCachedSize(), target, stream);
  }

  // .Db.ColumnCacheOptions cache = 2;
  if (this->_internal_has_cache()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cache(this),
        _Internal::cache(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Db.FieldOptionsColumn)
  return target;
}

size_t FieldOptionsColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Db.FieldOptionsColumn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Db.ColumnSqlOptions sql = 1;
  if (this->_internal_has_sql()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sql_);
  }

  // .Db.ColumnCacheOptions cache = 2;
  if (this->_internal_has_cache()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cache_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FieldOptionsColumn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FieldOptionsColumn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FieldOptionsColumn::GetClassData() const { return &_class_data_; }


void FieldOptionsColumn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FieldOptionsColumn*>(&to_msg);
  auto& from = static_cast<const FieldOptionsColumn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Db.FieldOptionsColumn)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sql()) {
    _this->_internal_mutable_sql()->::Db::ColumnSqlOptions::MergeFrom(
        from._internal_sql());
  }
  if (from._internal_has_cache()) {
    _this->_internal_mutable_cache()->::Db::ColumnCacheOptions::MergeFrom(
        from._internal_cache());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FieldOptionsColumn::CopyFrom(const FieldOptionsColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Db.FieldOptionsColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldOptionsColumn::IsInitialized() const {
  return true;
}

void FieldOptionsColumn::InternalSwap(FieldOptionsColumn* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FieldOptionsColumn, _impl_.cache_)
      + sizeof(FieldOptionsColumn::_impl_.cache_)
      - PROTOBUF_FIELD_OFFSET(FieldOptionsColumn, _impl_.sql_)>(
          reinterpret_cast<char*>(&_impl_.sql_),
          reinterpret_cast<char*>(&other->_impl_.sql_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldOptionsColumn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_db_2fdb_5foptions_2eproto_getter, &descriptor_table_db_2fdb_5foptions_2eproto_once,
      file_level_metadata_db_2fdb_5foptions_2eproto[8]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::Db::DbSqlOptions >, 11, false>
  sql(kSqlFieldNumber, ::Db::DbSqlOptions::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::Db::DbCacheOptions >, 11, false>
  cache(kCacheFieldNumber, ::Db::DbCacheOptions::default_instance(), nullptr);
const std::string name_default("");
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FileOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false>
  name(kNameFieldNumber, name_default, nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::Db::MessageOptionsTable >, 11, false>
  table(kTableFieldNumber, ::Db::MessageOptionsTable::default_instance(), nullptr);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::Db::FieldOptionsColumn >, 11, false>
  column(kColumnFieldNumber, ::Db::FieldOptionsColumn::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace Db
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Db::DbSqlOptions*
Arena::CreateMaybeMessage< ::Db::DbSqlOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::DbSqlOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::DbCacheOptions*
Arena::CreateMaybeMessage< ::Db::DbCacheOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::DbCacheOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::ForeignKey*
Arena::CreateMaybeMessage< ::Db::ForeignKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::ForeignKey >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::TableSqlOptions*
Arena::CreateMaybeMessage< ::Db::TableSqlOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::TableSqlOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::TableCacheOptions*
Arena::CreateMaybeMessage< ::Db::TableCacheOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::TableCacheOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::MessageOptionsTable*
Arena::CreateMaybeMessage< ::Db::MessageOptionsTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::MessageOptionsTable >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::ColumnSqlOptions*
Arena::CreateMaybeMessage< ::Db::ColumnSqlOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::ColumnSqlOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::ColumnCacheOptions*
Arena::CreateMaybeMessage< ::Db::ColumnCacheOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::ColumnCacheOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::Db::FieldOptionsColumn*
Arena::CreateMaybeMessage< ::Db::FieldOptionsColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Db::FieldOptionsColumn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
