// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cs/cs_user.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cs_2fcs_5fuser_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cs_2fcs_5fuser_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include "cs/cs_msgid.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cs_2fcs_5fuser_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_2fcs_5fuser_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cs_2fcs_5fuser_2eproto;
namespace Cs {
class UserLoginReq;
struct UserLoginReqDefaultTypeInternal;
extern UserLoginReqDefaultTypeInternal _UserLoginReq_default_instance_;
class UserLoginRes;
struct UserLoginResDefaultTypeInternal;
extern UserLoginResDefaultTypeInternal _UserLoginRes_default_instance_;
class UserRegisterReq;
struct UserRegisterReqDefaultTypeInternal;
extern UserRegisterReqDefaultTypeInternal _UserRegisterReq_default_instance_;
class UserRegisterRes;
struct UserRegisterResDefaultTypeInternal;
extern UserRegisterResDefaultTypeInternal _UserRegisterRes_default_instance_;
}  // namespace Cs
PROTOBUF_NAMESPACE_OPEN
template<> ::Cs::UserLoginReq* Arena::CreateMaybeMessage<::Cs::UserLoginReq>(Arena*);
template<> ::Cs::UserLoginRes* Arena::CreateMaybeMessage<::Cs::UserLoginRes>(Arena*);
template<> ::Cs::UserRegisterReq* Arena::CreateMaybeMessage<::Cs::UserRegisterReq>(Arena*);
template<> ::Cs::UserRegisterRes* Arena::CreateMaybeMessage<::Cs::UserRegisterRes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Cs {

enum SubMsgIdUser : int {
  SUB_MSG_ID_USER_INVALID = 0,
  SUB_MSG_ID_USER_REGISTER = 1,
  SUB_MSG_ID_USER_LOGIN = 2,
  SubMsgIdUser_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SubMsgIdUser_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SubMsgIdUser_IsValid(int value);
constexpr SubMsgIdUser SubMsgIdUser_MIN = SUB_MSG_ID_USER_INVALID;
constexpr SubMsgIdUser SubMsgIdUser_MAX = SUB_MSG_ID_USER_LOGIN;
constexpr int SubMsgIdUser_ARRAYSIZE = SubMsgIdUser_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubMsgIdUser_descriptor();
template<typename T>
inline const std::string& SubMsgIdUser_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SubMsgIdUser>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SubMsgIdUser_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SubMsgIdUser_descriptor(), enum_t_value);
}
inline bool SubMsgIdUser_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SubMsgIdUser* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SubMsgIdUser>(
    SubMsgIdUser_descriptor(), name, value);
}
// ===================================================================

class UserRegisterReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cs.UserRegisterReq) */ {
 public:
  inline UserRegisterReq() : UserRegisterReq(nullptr) {}
  ~UserRegisterReq() override;
  explicit PROTOBUF_CONSTEXPR UserRegisterReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegisterReq(const UserRegisterReq& from);
  UserRegisterReq(UserRegisterReq&& from) noexcept
    : UserRegisterReq() {
    *this = ::std::move(from);
  }

  inline UserRegisterReq& operator=(const UserRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterReq& operator=(UserRegisterReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegisterReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegisterReq* internal_default_instance() {
    return reinterpret_cast<const UserRegisterReq*>(
               &_UserRegisterReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserRegisterReq& a, UserRegisterReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegisterReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegisterReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserRegisterReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserRegisterReq& from) {
    UserRegisterReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserRegisterReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cs.UserRegisterReq";
  }
  protected:
  explicit UserRegisterReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Cs.UserRegisterReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_2fcs_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserRegisterRes final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Cs.UserRegisterRes) */ {
 public:
  inline UserRegisterRes() : UserRegisterRes(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserRegisterRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserRegisterRes(const UserRegisterRes& from);
  UserRegisterRes(UserRegisterRes&& from) noexcept
    : UserRegisterRes() {
    *this = ::std::move(from);
  }

  inline UserRegisterRes& operator=(const UserRegisterRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserRegisterRes& operator=(UserRegisterRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserRegisterRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserRegisterRes* internal_default_instance() {
    return reinterpret_cast<const UserRegisterRes*>(
               &_UserRegisterRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserRegisterRes& a, UserRegisterRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserRegisterRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserRegisterRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserRegisterRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserRegisterRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserRegisterRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserRegisterRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cs.UserRegisterRes";
  }
  protected:
  explicit UserRegisterRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cs.UserRegisterRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cs_2fcs_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserLoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Cs.UserLoginReq) */ {
 public:
  inline UserLoginReq() : UserLoginReq(nullptr) {}
  ~UserLoginReq() override;
  explicit PROTOBUF_CONSTEXPR UserLoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginReq(const UserLoginReq& from);
  UserLoginReq(UserLoginReq&& from) noexcept
    : UserLoginReq() {
    *this = ::std::move(from);
  }

  inline UserLoginReq& operator=(const UserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginReq& operator=(UserLoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginReq* internal_default_instance() {
    return reinterpret_cast<const UserLoginReq*>(
               &_UserLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserLoginReq& a, UserLoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginReq& from) {
    UserLoginReq::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cs.UserLoginReq";
  }
  protected:
  explicit UserLoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string user_name = 1;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:Cs.UserLoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_2fcs_5fuser_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRes final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Cs.UserLoginRes) */ {
 public:
  inline UserLoginRes() : UserLoginRes(nullptr) {}
  explicit PROTOBUF_CONSTEXPR UserLoginRes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginRes(const UserLoginRes& from);
  UserLoginRes(UserLoginRes&& from) noexcept
    : UserLoginRes() {
    *this = ::std::move(from);
  }

  inline UserLoginRes& operator=(const UserLoginRes& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRes& operator=(UserLoginRes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginRes& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginRes* internal_default_instance() {
    return reinterpret_cast<const UserLoginRes*>(
               &_UserLoginRes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserLoginRes& a, UserLoginRes& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginRes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginRes>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UserLoginRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UserLoginRes& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Cs.UserLoginRes";
  }
  protected:
  explicit UserLoginRes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Cs.UserLoginRes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_cs_2fcs_5fuser_2eproto;
};
// ===================================================================

static const int kCsSubMsgIdUserFieldNumber = 11001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::EnumTypeTraits< ::Cs::SubMsgIdUser, ::Cs::SubMsgIdUser_IsValid>, 14, false >
  cs_sub_msg_id_user;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserRegisterReq

// string user_name = 1;
inline void UserRegisterReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& UserRegisterReq::user_name() const {
  // @@protoc_insertion_point(field_get:Cs.UserRegisterReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegisterReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cs.UserRegisterReq.user_name)
}
inline std::string* UserRegisterReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:Cs.UserRegisterReq.user_name)
  return _s;
}
inline const std::string& UserRegisterReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void UserRegisterReq::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegisterReq::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegisterReq::release_user_name() {
  // @@protoc_insertion_point(field_release:Cs.UserRegisterReq.user_name)
  return _impl_.user_name_.Release();
}
inline void UserRegisterReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cs.UserRegisterReq.user_name)
}

// string password = 2;
inline void UserRegisterReq::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserRegisterReq::password() const {
  // @@protoc_insertion_point(field_get:Cs.UserRegisterReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserRegisterReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cs.UserRegisterReq.password)
}
inline std::string* UserRegisterReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Cs.UserRegisterReq.password)
  return _s;
}
inline const std::string& UserRegisterReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserRegisterReq::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserRegisterReq::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserRegisterReq::release_password() {
  // @@protoc_insertion_point(field_release:Cs.UserRegisterReq.password)
  return _impl_.password_.Release();
}
inline void UserRegisterReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cs.UserRegisterReq.password)
}

// -------------------------------------------------------------------

// UserRegisterRes

// -------------------------------------------------------------------

// UserLoginReq

// string user_name = 1;
inline void UserLoginReq::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& UserLoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:Cs.UserLoginReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cs.UserLoginReq.user_name)
}
inline std::string* UserLoginReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:Cs.UserLoginReq.user_name)
  return _s;
}
inline const std::string& UserLoginReq::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void UserLoginReq::_internal_set_user_name(const std::string& value) {
  
  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginReq::_internal_mutable_user_name() {
  
  return _impl_.user_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:Cs.UserLoginReq.user_name)
  return _impl_.user_name_.Release();
}
inline void UserLoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  _impl_.user_name_.SetAllocated(user_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_name_.IsDefault()) {
    _impl_.user_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cs.UserLoginReq.user_name)
}

// string password = 2;
inline void UserLoginReq::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserLoginReq::password() const {
  // @@protoc_insertion_point(field_get:Cs.UserLoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Cs.UserLoginReq.password)
}
inline std::string* UserLoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:Cs.UserLoginReq.password)
  return _s;
}
inline const std::string& UserLoginReq::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserLoginReq::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginReq::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:Cs.UserLoginReq.password)
  return _impl_.password_.Release();
}
inline void UserLoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Cs.UserLoginReq.password)
}

// -------------------------------------------------------------------

// UserLoginRes

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cs

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Cs::SubMsgIdUser> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cs::SubMsgIdUser>() {
  return ::Cs::SubMsgIdUser_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cs_2fcs_5fuser_2eproto
