// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: table/example.proto

#include "table/example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace million {
namespace example {
PROTOBUF_CONSTEXPR ExampleData::ExampleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_)*/{}
  , /*decltype(_impl_._skill_cached_byte_size_)*/{0}
  , /*decltype(_impl_.taglist_)*/{}
  , /*decltype(_impl_.multi_)*/{}
  , /*decltype(_impl_._multi_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.id2_)*/0
  , /*decltype(_impl_.accuracy_)*/0
  , /*decltype(_impl_.rate_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.buff_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExampleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExampleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExampleDataDefaultTypeInternal() {}
  union {
    ExampleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExampleDataDefaultTypeInternal _ExampleData_default_instance_;
PROTOBUF_CONSTEXPR ExtendData::ExtendData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.additive_)*/0
  , /*decltype(_impl_.index2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendDataDefaultTypeInternal() {}
  union {
    ExtendData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendDataDefaultTypeInternal _ExtendData_default_instance_;
PROTOBUF_CONSTEXPR ExampleKV::ExampleKV(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.groupid_)*/{}
  , /*decltype(_impl_._groupid_cached_byte_size_)*/{0}
  , /*decltype(_impl_.serverip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverport_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExampleKVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExampleKVDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExampleKVDefaultTypeInternal() {}
  union {
    ExampleKV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExampleKVDefaultTypeInternal _ExampleKV_default_instance_;
PROTOBUF_CONSTEXPR Table::Table(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exampledata_)*/{}
  , /*decltype(_impl_.extenddata_)*/{}
  , /*decltype(_impl_.examplekv_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefaultTypeInternal _Table_default_instance_;
}  // namespace example
}  // namespace million
static ::_pb::Metadata file_level_metadata_table_2fexample_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_table_2fexample_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_table_2fexample_2eproto = nullptr;

const uint32_t TableStruct_table_2fexample_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.id2_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.rate_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.accuracy_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.skill_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.buff_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.taglist_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleData, _impl_.multi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::million::example::ExtendData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::million::example::ExtendData, _impl_.additive_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExtendData, _impl_.index2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleKV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleKV, _impl_.serverip_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleKV, _impl_.serverport_),
  PROTOBUF_FIELD_OFFSET(::million::example::ExampleKV, _impl_.groupid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::million::example::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::million::example::Table, _impl_.exampledata_),
  PROTOBUF_FIELD_OFFSET(::million::example::Table, _impl_.extenddata_),
  PROTOBUF_FIELD_OFFSET(::million::example::Table, _impl_.examplekv_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::million::example::ExampleData)},
  { 16, -1, -1, sizeof(::million::example::ExtendData)},
  { 24, -1, -1, sizeof(::million::example::ExampleKV)},
  { 33, -1, -1, sizeof(::million::example::Table)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::million::example::_ExampleData_default_instance_._instance,
  &::million::example::_ExtendData_default_instance_._instance,
  &::million::example::_ExampleKV_default_instance_._instance,
  &::million::example::_Table_default_instance_._instance,
};

const char descriptor_table_protodef_table_2fexample_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023table/example.proto\022\017million.example\"\273"
  "\001\n\013ExampleData\022\n\n\002ID\030\001 \001(\005\022\013\n\003ID2\030\002 \001(\005\022"
  "\014\n\004Name\030\003 \001(\t\022\014\n\004Rate\030\004 \001(\002\022\020\n\010Accuracy\030"
  "\005 \001(\001\022(\n\004Type\030\006 \001(\0162\032.million.example.Ac"
  "torType\022\r\n\005Skill\030\007 \003(\005\022\014\n\004Buff\030\010 \001(\005\022\017\n\007"
  "TagList\030\t \003(\t\022\r\n\005Multi\030\n \003(\005\".\n\nExtendDa"
  "ta\022\020\n\010Additive\030\001 \001(\002\022\016\n\006Index2\030\002 \001(\005\"B\n\t"
  "ExampleKV\022\020\n\010ServerIP\030\001 \001(\t\022\022\n\nServerPor"
  "t\030\002 \001(\r\022\017\n\007GroupID\030\003 \003(\005\"\232\001\n\005Table\0221\n\013Ex"
  "ampleData\030\001 \003(\0132\034.million.example.Exampl"
  "eData\022/\n\nExtendData\030\002 \003(\0132\033.million.exam"
  "ple.ExtendData\022-\n\tExampleKV\030\003 \003(\0132\032.mill"
  "ion.example.ExampleKV*D\n\tActorType\022\010\n\004No"
  "ne\020\000\022\n\n\006Pharah\020\001\022\013\n\007Junkrat\020\002\022\t\n\005Genji\020\003"
  "\022\t\n\005Mercy\020\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_table_2fexample_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_table_2fexample_2eproto = {
    false, false, 579, descriptor_table_protodef_table_2fexample_2eproto,
    "table/example.proto",
    &descriptor_table_table_2fexample_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_table_2fexample_2eproto::offsets,
    file_level_metadata_table_2fexample_2eproto, file_level_enum_descriptors_table_2fexample_2eproto,
    file_level_service_descriptors_table_2fexample_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_table_2fexample_2eproto_getter() {
  return &descriptor_table_table_2fexample_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_table_2fexample_2eproto(&descriptor_table_table_2fexample_2eproto);
namespace million {
namespace example {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_table_2fexample_2eproto);
  return file_level_enum_descriptors_table_2fexample_2eproto[0];
}
bool ActorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ExampleData::_Internal {
 public:
};

ExampleData::ExampleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:million.example.ExampleData)
}
ExampleData::ExampleData(const ExampleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExampleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){from._impl_.skill_}
    , /*decltype(_impl_._skill_cached_byte_size_)*/{0}
    , decltype(_impl_.taglist_){from._impl_.taglist_}
    , decltype(_impl_.multi_){from._impl_.multi_}
    , /*decltype(_impl_._multi_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.id2_){}
    , decltype(_impl_.accuracy_){}
    , decltype(_impl_.rate_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.buff_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.buff_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.buff_));
  // @@protoc_insertion_point(copy_constructor:million.example.ExampleData)
}

inline void ExampleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_){arena}
    , /*decltype(_impl_._skill_cached_byte_size_)*/{0}
    , decltype(_impl_.taglist_){arena}
    , decltype(_impl_.multi_){arena}
    , /*decltype(_impl_._multi_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.id2_){0}
    , decltype(_impl_.accuracy_){0}
    , decltype(_impl_.rate_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.buff_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExampleData::~ExampleData() {
  // @@protoc_insertion_point(destructor:million.example.ExampleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExampleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skill_.~RepeatedField();
  _impl_.taglist_.~RepeatedPtrField();
  _impl_.multi_.~RepeatedField();
  _impl_.name_.Destroy();
}

void ExampleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExampleData::Clear() {
// @@protoc_insertion_point(message_clear_start:million.example.ExampleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skill_.Clear();
  _impl_.taglist_.Clear();
  _impl_.multi_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.buff_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.buff_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExampleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ID2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.id2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "million.example.ExampleData.Name"));
        } else
          goto handle_unusual;
        continue;
      // float Rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double Accuracy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .million.example.ActorType Type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::million::example::ActorType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Skill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_skill(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_skill(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 Buff = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.buff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string TagList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_taglist();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "million.example.ExampleData.TagList"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 Multi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_multi(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 80) {
          _internal_add_multi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExampleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:million.example.ExampleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 ID2 = 2;
  if (this->_internal_id2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_id2(), target);
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "million.example.ExampleData.Name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // float Rate = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_rate(), target);
  }

  // double Accuracy = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_accuracy = this->_internal_accuracy();
  uint64_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_accuracy(), target);
  }

  // .million.example.ActorType Type = 6;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_type(), target);
  }

  // repeated int32 Skill = 7;
  {
    int byte_size = _impl_._skill_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_skill(), byte_size, target);
    }
  }

  // int32 Buff = 8;
  if (this->_internal_buff() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_buff(), target);
  }

  // repeated string TagList = 9;
  for (int i = 0, n = this->_internal_taglist_size(); i < n; i++) {
    const auto& s = this->_internal_taglist(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "million.example.ExampleData.TagList");
    target = stream->WriteString(9, s, target);
  }

  // repeated int32 Multi = 10;
  {
    int byte_size = _impl_._multi_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          10, _internal_multi(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:million.example.ExampleData)
  return target;
}

size_t ExampleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:million.example.ExampleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 Skill = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.skill_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._skill_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string TagList = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.taglist_.size());
  for (int i = 0, n = _impl_.taglist_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.taglist_.Get(i));
  }

  // repeated int32 Multi = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.multi_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._multi_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 ID = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 ID2 = 2;
  if (this->_internal_id2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id2());
  }

  // double Accuracy = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_accuracy = this->_internal_accuracy();
  uint64_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    total_size += 1 + 8;
  }

  // float Rate = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = this->_internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    total_size += 1 + 4;
  }

  // .million.example.ActorType Type = 6;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 Buff = 8;
  if (this->_internal_buff() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buff());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExampleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExampleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExampleData::GetClassData() const { return &_class_data_; }


void ExampleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExampleData*>(&to_msg);
  auto& from = static_cast<const ExampleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:million.example.ExampleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skill_.MergeFrom(from._impl_.skill_);
  _this->_impl_.taglist_.MergeFrom(from._impl_.taglist_);
  _this->_impl_.multi_.MergeFrom(from._impl_.multi_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_id2() != 0) {
    _this->_internal_set_id2(from._internal_id2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_accuracy = from._internal_accuracy();
  uint64_t raw_accuracy;
  memcpy(&raw_accuracy, &tmp_accuracy, sizeof(tmp_accuracy));
  if (raw_accuracy != 0) {
    _this->_internal_set_accuracy(from._internal_accuracy());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_rate = from._internal_rate();
  uint32_t raw_rate;
  memcpy(&raw_rate, &tmp_rate, sizeof(tmp_rate));
  if (raw_rate != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_buff() != 0) {
    _this->_internal_set_buff(from._internal_buff());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExampleData::CopyFrom(const ExampleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:million.example.ExampleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleData::IsInitialized() const {
  return true;
}

void ExampleData::InternalSwap(ExampleData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skill_.InternalSwap(&other->_impl_.skill_);
  _impl_.taglist_.InternalSwap(&other->_impl_.taglist_);
  _impl_.multi_.InternalSwap(&other->_impl_.multi_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExampleData, _impl_.buff_)
      + sizeof(ExampleData::_impl_.buff_)
      - PROTOBUF_FIELD_OFFSET(ExampleData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExampleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_table_2fexample_2eproto_getter, &descriptor_table_table_2fexample_2eproto_once,
      file_level_metadata_table_2fexample_2eproto[0]);
}

// ===================================================================

class ExtendData::_Internal {
 public:
};

ExtendData::ExtendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:million.example.ExtendData)
}
ExtendData::ExtendData(const ExtendData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.additive_){}
    , decltype(_impl_.index2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.additive_, &from._impl_.additive_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index2_) -
    reinterpret_cast<char*>(&_impl_.additive_)) + sizeof(_impl_.index2_));
  // @@protoc_insertion_point(copy_constructor:million.example.ExtendData)
}

inline void ExtendData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.additive_){0}
    , decltype(_impl_.index2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtendData::~ExtendData() {
  // @@protoc_insertion_point(destructor:million.example.ExtendData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtendData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendData::Clear() {
// @@protoc_insertion_point(message_clear_start:million.example.ExtendData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.additive_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index2_) -
      reinterpret_cast<char*>(&_impl_.additive_)) + sizeof(_impl_.index2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Additive = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.additive_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 Index2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:million.example.ExtendData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Additive = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additive = this->_internal_additive();
  uint32_t raw_additive;
  memcpy(&raw_additive, &tmp_additive, sizeof(tmp_additive));
  if (raw_additive != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_additive(), target);
  }

  // int32 Index2 = 2;
  if (this->_internal_index2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:million.example.ExtendData)
  return target;
}

size_t ExtendData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:million.example.ExtendData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Additive = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additive = this->_internal_additive();
  uint32_t raw_additive;
  memcpy(&raw_additive, &tmp_additive, sizeof(tmp_additive));
  if (raw_additive != 0) {
    total_size += 1 + 4;
  }

  // int32 Index2 = 2;
  if (this->_internal_index2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendData::GetClassData() const { return &_class_data_; }


void ExtendData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendData*>(&to_msg);
  auto& from = static_cast<const ExtendData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:million.example.ExtendData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_additive = from._internal_additive();
  uint32_t raw_additive;
  memcpy(&raw_additive, &tmp_additive, sizeof(tmp_additive));
  if (raw_additive != 0) {
    _this->_internal_set_additive(from._internal_additive());
  }
  if (from._internal_index2() != 0) {
    _this->_internal_set_index2(from._internal_index2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendData::CopyFrom(const ExtendData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:million.example.ExtendData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendData::IsInitialized() const {
  return true;
}

void ExtendData::InternalSwap(ExtendData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendData, _impl_.index2_)
      + sizeof(ExtendData::_impl_.index2_)
      - PROTOBUF_FIELD_OFFSET(ExtendData, _impl_.additive_)>(
          reinterpret_cast<char*>(&_impl_.additive_),
          reinterpret_cast<char*>(&other->_impl_.additive_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_table_2fexample_2eproto_getter, &descriptor_table_table_2fexample_2eproto_once,
      file_level_metadata_table_2fexample_2eproto[1]);
}

// ===================================================================

class ExampleKV::_Internal {
 public:
};

ExampleKV::ExampleKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:million.example.ExampleKV)
}
ExampleKV::ExampleKV(const ExampleKV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExampleKV* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){from._impl_.groupid_}
    , /*decltype(_impl_._groupid_cached_byte_size_)*/{0}
    , decltype(_impl_.serverip_){}
    , decltype(_impl_.serverport_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.serverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serverip().empty()) {
    _this->_impl_.serverip_.Set(from._internal_serverip(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serverport_ = from._impl_.serverport_;
  // @@protoc_insertion_point(copy_constructor:million.example.ExampleKV)
}

inline void ExampleKV::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.groupid_){arena}
    , /*decltype(_impl_._groupid_cached_byte_size_)*/{0}
    , decltype(_impl_.serverip_){}
    , decltype(_impl_.serverport_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.serverip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serverip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExampleKV::~ExampleKV() {
  // @@protoc_insertion_point(destructor:million.example.ExampleKV)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExampleKV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.groupid_.~RepeatedField();
  _impl_.serverip_.Destroy();
}

void ExampleKV::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExampleKV::Clear() {
// @@protoc_insertion_point(message_clear_start:million.example.ExampleKV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.groupid_.Clear();
  _impl_.serverip_.ClearToEmpty();
  _impl_.serverport_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExampleKV::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ServerIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serverip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "million.example.ExampleKV.ServerIP"));
        } else
          goto handle_unusual;
        continue;
      // uint32 ServerPort = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.serverport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 GroupID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_groupid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_groupid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExampleKV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:million.example.ExampleKV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ServerIP = 1;
  if (!this->_internal_serverip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serverip().data(), static_cast<int>(this->_internal_serverip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "million.example.ExampleKV.ServerIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serverip(), target);
  }

  // uint32 ServerPort = 2;
  if (this->_internal_serverport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serverport(), target);
  }

  // repeated int32 GroupID = 3;
  {
    int byte_size = _impl_._groupid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_groupid(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:million.example.ExampleKV)
  return target;
}

size_t ExampleKV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:million.example.ExampleKV)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 GroupID = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.groupid_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._groupid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ServerIP = 1;
  if (!this->_internal_serverip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serverip());
  }

  // uint32 ServerPort = 2;
  if (this->_internal_serverport() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExampleKV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExampleKV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExampleKV::GetClassData() const { return &_class_data_; }


void ExampleKV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExampleKV*>(&to_msg);
  auto& from = static_cast<const ExampleKV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:million.example.ExampleKV)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.groupid_.MergeFrom(from._impl_.groupid_);
  if (!from._internal_serverip().empty()) {
    _this->_internal_set_serverip(from._internal_serverip());
  }
  if (from._internal_serverport() != 0) {
    _this->_internal_set_serverport(from._internal_serverport());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExampleKV::CopyFrom(const ExampleKV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:million.example.ExampleKV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExampleKV::IsInitialized() const {
  return true;
}

void ExampleKV::InternalSwap(ExampleKV* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.groupid_.InternalSwap(&other->_impl_.groupid_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serverip_, lhs_arena,
      &other->_impl_.serverip_, rhs_arena
  );
  swap(_impl_.serverport_, other->_impl_.serverport_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExampleKV::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_table_2fexample_2eproto_getter, &descriptor_table_table_2fexample_2eproto_once,
      file_level_metadata_table_2fexample_2eproto[2]);
}

// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:million.example.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Table* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exampledata_){from._impl_.exampledata_}
    , decltype(_impl_.extenddata_){from._impl_.extenddata_}
    , decltype(_impl_.examplekv_){from._impl_.examplekv_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:million.example.Table)
}

inline void Table::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exampledata_){arena}
    , decltype(_impl_.extenddata_){arena}
    , decltype(_impl_.examplekv_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:million.example.Table)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exampledata_.~RepeatedPtrField();
  _impl_.extenddata_.~RepeatedPtrField();
  _impl_.examplekv_.~RepeatedPtrField();
}

void Table::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:million.example.Table)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exampledata_.Clear();
  _impl_.extenddata_.Clear();
  _impl_.examplekv_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .million.example.ExampleData ExampleData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exampledata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .million.example.ExtendData ExtendData = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extenddata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .million.example.ExampleKV ExampleKV = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_examplekv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Table::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:million.example.Table)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .million.example.ExampleData ExampleData = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exampledata_size()); i < n; i++) {
    const auto& repfield = this->_internal_exampledata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .million.example.ExtendData ExtendData = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_extenddata_size()); i < n; i++) {
    const auto& repfield = this->_internal_extenddata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .million.example.ExampleKV ExampleKV = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_examplekv_size()); i < n; i++) {
    const auto& repfield = this->_internal_examplekv(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:million.example.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:million.example.Table)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .million.example.ExampleData ExampleData = 1;
  total_size += 1UL * this->_internal_exampledata_size();
  for (const auto& msg : this->_impl_.exampledata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .million.example.ExtendData ExtendData = 2;
  total_size += 1UL * this->_internal_extenddata_size();
  for (const auto& msg : this->_impl_.extenddata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .million.example.ExampleKV ExampleKV = 3;
  total_size += 1UL * this->_internal_examplekv_size();
  for (const auto& msg : this->_impl_.examplekv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Table::GetClassData() const { return &_class_data_; }


void Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Table*>(&to_msg);
  auto& from = static_cast<const Table&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:million.example.Table)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.exampledata_.MergeFrom(from._impl_.exampledata_);
  _this->_impl_.extenddata_.MergeFrom(from._impl_.extenddata_);
  _this->_impl_.examplekv_.MergeFrom(from._impl_.examplekv_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:million.example.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exampledata_.InternalSwap(&other->_impl_.exampledata_);
  _impl_.extenddata_.InternalSwap(&other->_impl_.extenddata_);
  _impl_.examplekv_.InternalSwap(&other->_impl_.examplekv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_table_2fexample_2eproto_getter, &descriptor_table_table_2fexample_2eproto_once,
      file_level_metadata_table_2fexample_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace example
}  // namespace million
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::million::example::ExampleData*
Arena::CreateMaybeMessage< ::million::example::ExampleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::million::example::ExampleData >(arena);
}
template<> PROTOBUF_NOINLINE ::million::example::ExtendData*
Arena::CreateMaybeMessage< ::million::example::ExtendData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::million::example::ExtendData >(arena);
}
template<> PROTOBUF_NOINLINE ::million::example::ExampleKV*
Arena::CreateMaybeMessage< ::million::example::ExampleKV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::million::example::ExampleKV >(arena);
}
template<> PROTOBUF_NOINLINE ::million::example::Table*
Arena::CreateMaybeMessage< ::million::example::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::million::example::Table >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
