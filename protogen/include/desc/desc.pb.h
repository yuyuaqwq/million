// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desc/desc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_desc_2fdesc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_desc_2fdesc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_desc_2fdesc_2eproto PROTOGEN_API
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PROTOGEN_API TableStruct_desc_2fdesc_2eproto {
  static const uint32_t offsets[];
};
PROTOGEN_API extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_desc_2fdesc_2eproto;
namespace desc {
class ExampleData;
struct ExampleDataDefaultTypeInternal;
PROTOGEN_API extern ExampleDataDefaultTypeInternal _ExampleData_default_instance_;
class ExampleKV;
struct ExampleKVDefaultTypeInternal;
PROTOGEN_API extern ExampleKVDefaultTypeInternal _ExampleKV_default_instance_;
class ExtendData;
struct ExtendDataDefaultTypeInternal;
PROTOGEN_API extern ExtendDataDefaultTypeInternal _ExtendData_default_instance_;
class Table;
struct TableDefaultTypeInternal;
PROTOGEN_API extern TableDefaultTypeInternal _Table_default_instance_;
}  // namespace desc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOGEN_API ::desc::ExampleData* Arena::CreateMaybeMessage<::desc::ExampleData>(Arena*);
template<> PROTOGEN_API ::desc::ExampleKV* Arena::CreateMaybeMessage<::desc::ExampleKV>(Arena*);
template<> PROTOGEN_API ::desc::ExtendData* Arena::CreateMaybeMessage<::desc::ExtendData>(Arena*);
template<> PROTOGEN_API ::desc::Table* Arena::CreateMaybeMessage<::desc::Table>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace desc {

enum ActorType : int {
  None = 0,
  Pharah = 1,
  Junkrat = 2,
  Genji = 3,
  Mercy = 4,
  ActorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ActorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
PROTOGEN_API bool ActorType_IsValid(int value);
constexpr ActorType ActorType_MIN = None;
constexpr ActorType ActorType_MAX = Mercy;
constexpr int ActorType_ARRAYSIZE = ActorType_MAX + 1;

PROTOGEN_API const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActorType_descriptor();
template<typename T>
inline const std::string& ActorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActorType_descriptor(), enum_t_value);
}
inline bool ActorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActorType>(
    ActorType_descriptor(), name, value);
}
// ===================================================================

class PROTOGEN_API ExampleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:desc.ExampleData) */ {
 public:
  inline ExampleData() : ExampleData(nullptr) {}
  ~ExampleData() override;
  explicit PROTOBUF_CONSTEXPR ExampleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleData(const ExampleData& from);
  ExampleData(ExampleData&& from) noexcept
    : ExampleData() {
    *this = ::std::move(from);
  }

  inline ExampleData& operator=(const ExampleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleData& operator=(ExampleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExampleData* internal_default_instance() {
    return reinterpret_cast<const ExampleData*>(
               &_ExampleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExampleData& a, ExampleData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExampleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExampleData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExampleData& from) {
    ExampleData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "desc.ExampleData";
  }
  protected:
  explicit ExampleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillFieldNumber = 7,
    kTagListFieldNumber = 9,
    kMultiFieldNumber = 10,
    kNameFieldNumber = 3,
    kIDFieldNumber = 1,
    kID2FieldNumber = 2,
    kAccuracyFieldNumber = 5,
    kRateFieldNumber = 4,
    kTypeFieldNumber = 6,
    kBuffFieldNumber = 8,
  };
  // repeated int32 Skill = 7;
  int skill_size() const;
  private:
  int _internal_skill_size() const;
  public:
  void clear_skill();
  private:
  int32_t _internal_skill(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_skill() const;
  void _internal_add_skill(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_skill();
  public:
  int32_t skill(int index) const;
  void set_skill(int index, int32_t value);
  void add_skill(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      skill() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_skill();

  // repeated string TagList = 9;
  int taglist_size() const;
  private:
  int _internal_taglist_size() const;
  public:
  void clear_taglist();
  const std::string& taglist(int index) const;
  std::string* mutable_taglist(int index);
  void set_taglist(int index, const std::string& value);
  void set_taglist(int index, std::string&& value);
  void set_taglist(int index, const char* value);
  void set_taglist(int index, const char* value, size_t size);
  std::string* add_taglist();
  void add_taglist(const std::string& value);
  void add_taglist(std::string&& value);
  void add_taglist(const char* value);
  void add_taglist(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& taglist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_taglist();
  private:
  const std::string& _internal_taglist(int index) const;
  std::string* _internal_add_taglist();
  public:

  // repeated int32 Multi = 10;
  int multi_size() const;
  private:
  int _internal_multi_size() const;
  public:
  void clear_multi();
  private:
  int32_t _internal_multi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_multi() const;
  void _internal_add_multi(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_multi();
  public:
  int32_t multi(int index) const;
  void set_multi(int index, int32_t value);
  void add_multi(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      multi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_multi();

  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 ID = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 ID2 = 2;
  void clear_id2();
  int32_t id2() const;
  void set_id2(int32_t value);
  private:
  int32_t _internal_id2() const;
  void _internal_set_id2(int32_t value);
  public:

  // double Accuracy = 5;
  void clear_accuracy();
  double accuracy() const;
  void set_accuracy(double value);
  private:
  double _internal_accuracy() const;
  void _internal_set_accuracy(double value);
  public:

  // float Rate = 4;
  void clear_rate();
  float rate() const;
  void set_rate(float value);
  private:
  float _internal_rate() const;
  void _internal_set_rate(float value);
  public:

  // .desc.ActorType Type = 6;
  void clear_type();
  ::desc::ActorType type() const;
  void set_type(::desc::ActorType value);
  private:
  ::desc::ActorType _internal_type() const;
  void _internal_set_type(::desc::ActorType value);
  public:

  // int32 Buff = 8;
  void clear_buff();
  int32_t buff() const;
  void set_buff(int32_t value);
  private:
  int32_t _internal_buff() const;
  void _internal_set_buff(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:desc.ExampleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > skill_;
    mutable std::atomic<int> _skill_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> taglist_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > multi_;
    mutable std::atomic<int> _multi_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    int32_t id_;
    int32_t id2_;
    double accuracy_;
    float rate_;
    int type_;
    int32_t buff_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desc_2fdesc_2eproto;
};
// -------------------------------------------------------------------

class PROTOGEN_API ExtendData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:desc.ExtendData) */ {
 public:
  inline ExtendData() : ExtendData(nullptr) {}
  ~ExtendData() override;
  explicit PROTOBUF_CONSTEXPR ExtendData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendData(const ExtendData& from);
  ExtendData(ExtendData&& from) noexcept
    : ExtendData() {
    *this = ::std::move(from);
  }

  inline ExtendData& operator=(const ExtendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendData& operator=(ExtendData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendData* internal_default_instance() {
    return reinterpret_cast<const ExtendData*>(
               &_ExtendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtendData& a, ExtendData& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtendData& from) {
    ExtendData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "desc.ExtendData";
  }
  protected:
  explicit ExtendData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdditiveFieldNumber = 1,
    kIndex2FieldNumber = 2,
  };
  // float Additive = 1;
  void clear_additive();
  float additive() const;
  void set_additive(float value);
  private:
  float _internal_additive() const;
  void _internal_set_additive(float value);
  public:

  // int32 Index2 = 2;
  void clear_index2();
  int32_t index2() const;
  void set_index2(int32_t value);
  private:
  int32_t _internal_index2() const;
  void _internal_set_index2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:desc.ExtendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float additive_;
    int32_t index2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desc_2fdesc_2eproto;
};
// -------------------------------------------------------------------

class PROTOGEN_API ExampleKV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:desc.ExampleKV) */ {
 public:
  inline ExampleKV() : ExampleKV(nullptr) {}
  ~ExampleKV() override;
  explicit PROTOBUF_CONSTEXPR ExampleKV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExampleKV(const ExampleKV& from);
  ExampleKV(ExampleKV&& from) noexcept
    : ExampleKV() {
    *this = ::std::move(from);
  }

  inline ExampleKV& operator=(const ExampleKV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExampleKV& operator=(ExampleKV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExampleKV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExampleKV* internal_default_instance() {
    return reinterpret_cast<const ExampleKV*>(
               &_ExampleKV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ExampleKV& a, ExampleKV& b) {
    a.Swap(&b);
  }
  inline void Swap(ExampleKV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExampleKV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExampleKV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExampleKV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExampleKV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExampleKV& from) {
    ExampleKV::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExampleKV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "desc.ExampleKV";
  }
  protected:
  explicit ExampleKV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupIDFieldNumber = 3,
    kServerIPFieldNumber = 1,
    kServerPortFieldNumber = 2,
  };
  // repeated int32 GroupID = 3;
  int groupid_size() const;
  private:
  int _internal_groupid_size() const;
  public:
  void clear_groupid();
  private:
  int32_t _internal_groupid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_groupid() const;
  void _internal_add_groupid(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_groupid();
  public:
  int32_t groupid(int index) const;
  void set_groupid(int index, int32_t value);
  void add_groupid(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      groupid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_groupid();

  // string ServerIP = 1;
  void clear_serverip();
  const std::string& serverip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverip();
  PROTOBUF_NODISCARD std::string* release_serverip();
  void set_allocated_serverip(std::string* serverip);
  private:
  const std::string& _internal_serverip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverip(const std::string& value);
  std::string* _internal_mutable_serverip();
  public:

  // uint32 ServerPort = 2;
  void clear_serverport();
  uint32_t serverport() const;
  void set_serverport(uint32_t value);
  private:
  uint32_t _internal_serverport() const;
  void _internal_set_serverport(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:desc.ExampleKV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > groupid_;
    mutable std::atomic<int> _groupid_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverip_;
    uint32_t serverport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desc_2fdesc_2eproto;
};
// -------------------------------------------------------------------

class PROTOGEN_API Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:desc.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit PROTOBUF_CONSTEXPR Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Table& from) {
    Table::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "desc.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExampleDataFieldNumber = 1,
    kExtendDataFieldNumber = 2,
    kExampleKVFieldNumber = 3,
  };
  // repeated .desc.ExampleData ExampleData = 1;
  int exampledata_size() const;
  private:
  int _internal_exampledata_size() const;
  public:
  void clear_exampledata();
  ::desc::ExampleData* mutable_exampledata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleData >*
      mutable_exampledata();
  private:
  const ::desc::ExampleData& _internal_exampledata(int index) const;
  ::desc::ExampleData* _internal_add_exampledata();
  public:
  const ::desc::ExampleData& exampledata(int index) const;
  ::desc::ExampleData* add_exampledata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleData >&
      exampledata() const;

  // repeated .desc.ExtendData ExtendData = 2;
  int extenddata_size() const;
  private:
  int _internal_extenddata_size() const;
  public:
  void clear_extenddata();
  ::desc::ExtendData* mutable_extenddata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExtendData >*
      mutable_extenddata();
  private:
  const ::desc::ExtendData& _internal_extenddata(int index) const;
  ::desc::ExtendData* _internal_add_extenddata();
  public:
  const ::desc::ExtendData& extenddata(int index) const;
  ::desc::ExtendData* add_extenddata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExtendData >&
      extenddata() const;

  // repeated .desc.ExampleKV ExampleKV = 3;
  int examplekv_size() const;
  private:
  int _internal_examplekv_size() const;
  public:
  void clear_examplekv();
  ::desc::ExampleKV* mutable_examplekv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleKV >*
      mutable_examplekv();
  private:
  const ::desc::ExampleKV& _internal_examplekv(int index) const;
  ::desc::ExampleKV* _internal_add_examplekv();
  public:
  const ::desc::ExampleKV& examplekv(int index) const;
  ::desc::ExampleKV* add_examplekv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleKV >&
      examplekv() const;

  // @@protoc_insertion_point(class_scope:desc.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleData > exampledata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExtendData > extenddata_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleKV > examplekv_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_desc_2fdesc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExampleData

// int32 ID = 1;
inline void ExampleData::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t ExampleData::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ExampleData::id() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.ID)
  return _internal_id();
}
inline void ExampleData::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void ExampleData::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.ID)
}

// int32 ID2 = 2;
inline void ExampleData::clear_id2() {
  _impl_.id2_ = 0;
}
inline int32_t ExampleData::_internal_id2() const {
  return _impl_.id2_;
}
inline int32_t ExampleData::id2() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.ID2)
  return _internal_id2();
}
inline void ExampleData::_internal_set_id2(int32_t value) {
  
  _impl_.id2_ = value;
}
inline void ExampleData::set_id2(int32_t value) {
  _internal_set_id2(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.ID2)
}

// string Name = 3;
inline void ExampleData::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ExampleData::name() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExampleData::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:desc.ExampleData.Name)
}
inline std::string* ExampleData::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:desc.ExampleData.Name)
  return _s;
}
inline const std::string& ExampleData::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ExampleData::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ExampleData::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ExampleData::release_name() {
  // @@protoc_insertion_point(field_release:desc.ExampleData.Name)
  return _impl_.name_.Release();
}
inline void ExampleData::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:desc.ExampleData.Name)
}

// float Rate = 4;
inline void ExampleData::clear_rate() {
  _impl_.rate_ = 0;
}
inline float ExampleData::_internal_rate() const {
  return _impl_.rate_;
}
inline float ExampleData::rate() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Rate)
  return _internal_rate();
}
inline void ExampleData::_internal_set_rate(float value) {
  
  _impl_.rate_ = value;
}
inline void ExampleData::set_rate(float value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Rate)
}

// double Accuracy = 5;
inline void ExampleData::clear_accuracy() {
  _impl_.accuracy_ = 0;
}
inline double ExampleData::_internal_accuracy() const {
  return _impl_.accuracy_;
}
inline double ExampleData::accuracy() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Accuracy)
  return _internal_accuracy();
}
inline void ExampleData::_internal_set_accuracy(double value) {
  
  _impl_.accuracy_ = value;
}
inline void ExampleData::set_accuracy(double value) {
  _internal_set_accuracy(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Accuracy)
}

// .desc.ActorType Type = 6;
inline void ExampleData::clear_type() {
  _impl_.type_ = 0;
}
inline ::desc::ActorType ExampleData::_internal_type() const {
  return static_cast< ::desc::ActorType >(_impl_.type_);
}
inline ::desc::ActorType ExampleData::type() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Type)
  return _internal_type();
}
inline void ExampleData::_internal_set_type(::desc::ActorType value) {
  
  _impl_.type_ = value;
}
inline void ExampleData::set_type(::desc::ActorType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Type)
}

// repeated int32 Skill = 7;
inline int ExampleData::_internal_skill_size() const {
  return _impl_.skill_.size();
}
inline int ExampleData::skill_size() const {
  return _internal_skill_size();
}
inline void ExampleData::clear_skill() {
  _impl_.skill_.Clear();
}
inline int32_t ExampleData::_internal_skill(int index) const {
  return _impl_.skill_.Get(index);
}
inline int32_t ExampleData::skill(int index) const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Skill)
  return _internal_skill(index);
}
inline void ExampleData::set_skill(int index, int32_t value) {
  _impl_.skill_.Set(index, value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Skill)
}
inline void ExampleData::_internal_add_skill(int32_t value) {
  _impl_.skill_.Add(value);
}
inline void ExampleData::add_skill(int32_t value) {
  _internal_add_skill(value);
  // @@protoc_insertion_point(field_add:desc.ExampleData.Skill)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleData::_internal_skill() const {
  return _impl_.skill_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleData::skill() const {
  // @@protoc_insertion_point(field_list:desc.ExampleData.Skill)
  return _internal_skill();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleData::_internal_mutable_skill() {
  return &_impl_.skill_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleData::mutable_skill() {
  // @@protoc_insertion_point(field_mutable_list:desc.ExampleData.Skill)
  return _internal_mutable_skill();
}

// int32 Buff = 8;
inline void ExampleData::clear_buff() {
  _impl_.buff_ = 0;
}
inline int32_t ExampleData::_internal_buff() const {
  return _impl_.buff_;
}
inline int32_t ExampleData::buff() const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Buff)
  return _internal_buff();
}
inline void ExampleData::_internal_set_buff(int32_t value) {
  
  _impl_.buff_ = value;
}
inline void ExampleData::set_buff(int32_t value) {
  _internal_set_buff(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Buff)
}

// repeated string TagList = 9;
inline int ExampleData::_internal_taglist_size() const {
  return _impl_.taglist_.size();
}
inline int ExampleData::taglist_size() const {
  return _internal_taglist_size();
}
inline void ExampleData::clear_taglist() {
  _impl_.taglist_.Clear();
}
inline std::string* ExampleData::add_taglist() {
  std::string* _s = _internal_add_taglist();
  // @@protoc_insertion_point(field_add_mutable:desc.ExampleData.TagList)
  return _s;
}
inline const std::string& ExampleData::_internal_taglist(int index) const {
  return _impl_.taglist_.Get(index);
}
inline const std::string& ExampleData::taglist(int index) const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.TagList)
  return _internal_taglist(index);
}
inline std::string* ExampleData::mutable_taglist(int index) {
  // @@protoc_insertion_point(field_mutable:desc.ExampleData.TagList)
  return _impl_.taglist_.Mutable(index);
}
inline void ExampleData::set_taglist(int index, const std::string& value) {
  _impl_.taglist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.TagList)
}
inline void ExampleData::set_taglist(int index, std::string&& value) {
  _impl_.taglist_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:desc.ExampleData.TagList)
}
inline void ExampleData::set_taglist(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.taglist_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:desc.ExampleData.TagList)
}
inline void ExampleData::set_taglist(int index, const char* value, size_t size) {
  _impl_.taglist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:desc.ExampleData.TagList)
}
inline std::string* ExampleData::_internal_add_taglist() {
  return _impl_.taglist_.Add();
}
inline void ExampleData::add_taglist(const std::string& value) {
  _impl_.taglist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:desc.ExampleData.TagList)
}
inline void ExampleData::add_taglist(std::string&& value) {
  _impl_.taglist_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:desc.ExampleData.TagList)
}
inline void ExampleData::add_taglist(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.taglist_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:desc.ExampleData.TagList)
}
inline void ExampleData::add_taglist(const char* value, size_t size) {
  _impl_.taglist_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:desc.ExampleData.TagList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExampleData::taglist() const {
  // @@protoc_insertion_point(field_list:desc.ExampleData.TagList)
  return _impl_.taglist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExampleData::mutable_taglist() {
  // @@protoc_insertion_point(field_mutable_list:desc.ExampleData.TagList)
  return &_impl_.taglist_;
}

// repeated int32 Multi = 10;
inline int ExampleData::_internal_multi_size() const {
  return _impl_.multi_.size();
}
inline int ExampleData::multi_size() const {
  return _internal_multi_size();
}
inline void ExampleData::clear_multi() {
  _impl_.multi_.Clear();
}
inline int32_t ExampleData::_internal_multi(int index) const {
  return _impl_.multi_.Get(index);
}
inline int32_t ExampleData::multi(int index) const {
  // @@protoc_insertion_point(field_get:desc.ExampleData.Multi)
  return _internal_multi(index);
}
inline void ExampleData::set_multi(int index, int32_t value) {
  _impl_.multi_.Set(index, value);
  // @@protoc_insertion_point(field_set:desc.ExampleData.Multi)
}
inline void ExampleData::_internal_add_multi(int32_t value) {
  _impl_.multi_.Add(value);
}
inline void ExampleData::add_multi(int32_t value) {
  _internal_add_multi(value);
  // @@protoc_insertion_point(field_add:desc.ExampleData.Multi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleData::_internal_multi() const {
  return _impl_.multi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleData::multi() const {
  // @@protoc_insertion_point(field_list:desc.ExampleData.Multi)
  return _internal_multi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleData::_internal_mutable_multi() {
  return &_impl_.multi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleData::mutable_multi() {
  // @@protoc_insertion_point(field_mutable_list:desc.ExampleData.Multi)
  return _internal_mutable_multi();
}

// -------------------------------------------------------------------

// ExtendData

// float Additive = 1;
inline void ExtendData::clear_additive() {
  _impl_.additive_ = 0;
}
inline float ExtendData::_internal_additive() const {
  return _impl_.additive_;
}
inline float ExtendData::additive() const {
  // @@protoc_insertion_point(field_get:desc.ExtendData.Additive)
  return _internal_additive();
}
inline void ExtendData::_internal_set_additive(float value) {
  
  _impl_.additive_ = value;
}
inline void ExtendData::set_additive(float value) {
  _internal_set_additive(value);
  // @@protoc_insertion_point(field_set:desc.ExtendData.Additive)
}

// int32 Index2 = 2;
inline void ExtendData::clear_index2() {
  _impl_.index2_ = 0;
}
inline int32_t ExtendData::_internal_index2() const {
  return _impl_.index2_;
}
inline int32_t ExtendData::index2() const {
  // @@protoc_insertion_point(field_get:desc.ExtendData.Index2)
  return _internal_index2();
}
inline void ExtendData::_internal_set_index2(int32_t value) {
  
  _impl_.index2_ = value;
}
inline void ExtendData::set_index2(int32_t value) {
  _internal_set_index2(value);
  // @@protoc_insertion_point(field_set:desc.ExtendData.Index2)
}

// -------------------------------------------------------------------

// ExampleKV

// string ServerIP = 1;
inline void ExampleKV::clear_serverip() {
  _impl_.serverip_.ClearToEmpty();
}
inline const std::string& ExampleKV::serverip() const {
  // @@protoc_insertion_point(field_get:desc.ExampleKV.ServerIP)
  return _internal_serverip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExampleKV::set_serverip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.serverip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:desc.ExampleKV.ServerIP)
}
inline std::string* ExampleKV::mutable_serverip() {
  std::string* _s = _internal_mutable_serverip();
  // @@protoc_insertion_point(field_mutable:desc.ExampleKV.ServerIP)
  return _s;
}
inline const std::string& ExampleKV::_internal_serverip() const {
  return _impl_.serverip_.Get();
}
inline void ExampleKV::_internal_set_serverip(const std::string& value) {
  
  _impl_.serverip_.Set(value, GetArenaForAllocation());
}
inline std::string* ExampleKV::_internal_mutable_serverip() {
  
  return _impl_.serverip_.Mutable(GetArenaForAllocation());
}
inline std::string* ExampleKV::release_serverip() {
  // @@protoc_insertion_point(field_release:desc.ExampleKV.ServerIP)
  return _impl_.serverip_.Release();
}
inline void ExampleKV::set_allocated_serverip(std::string* serverip) {
  if (serverip != nullptr) {
    
  } else {
    
  }
  _impl_.serverip_.SetAllocated(serverip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.serverip_.IsDefault()) {
    _impl_.serverip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:desc.ExampleKV.ServerIP)
}

// uint32 ServerPort = 2;
inline void ExampleKV::clear_serverport() {
  _impl_.serverport_ = 0u;
}
inline uint32_t ExampleKV::_internal_serverport() const {
  return _impl_.serverport_;
}
inline uint32_t ExampleKV::serverport() const {
  // @@protoc_insertion_point(field_get:desc.ExampleKV.ServerPort)
  return _internal_serverport();
}
inline void ExampleKV::_internal_set_serverport(uint32_t value) {
  
  _impl_.serverport_ = value;
}
inline void ExampleKV::set_serverport(uint32_t value) {
  _internal_set_serverport(value);
  // @@protoc_insertion_point(field_set:desc.ExampleKV.ServerPort)
}

// repeated int32 GroupID = 3;
inline int ExampleKV::_internal_groupid_size() const {
  return _impl_.groupid_.size();
}
inline int ExampleKV::groupid_size() const {
  return _internal_groupid_size();
}
inline void ExampleKV::clear_groupid() {
  _impl_.groupid_.Clear();
}
inline int32_t ExampleKV::_internal_groupid(int index) const {
  return _impl_.groupid_.Get(index);
}
inline int32_t ExampleKV::groupid(int index) const {
  // @@protoc_insertion_point(field_get:desc.ExampleKV.GroupID)
  return _internal_groupid(index);
}
inline void ExampleKV::set_groupid(int index, int32_t value) {
  _impl_.groupid_.Set(index, value);
  // @@protoc_insertion_point(field_set:desc.ExampleKV.GroupID)
}
inline void ExampleKV::_internal_add_groupid(int32_t value) {
  _impl_.groupid_.Add(value);
}
inline void ExampleKV::add_groupid(int32_t value) {
  _internal_add_groupid(value);
  // @@protoc_insertion_point(field_add:desc.ExampleKV.GroupID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleKV::_internal_groupid() const {
  return _impl_.groupid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ExampleKV::groupid() const {
  // @@protoc_insertion_point(field_list:desc.ExampleKV.GroupID)
  return _internal_groupid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleKV::_internal_mutable_groupid() {
  return &_impl_.groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ExampleKV::mutable_groupid() {
  // @@protoc_insertion_point(field_mutable_list:desc.ExampleKV.GroupID)
  return _internal_mutable_groupid();
}

// -------------------------------------------------------------------

// Table

// repeated .desc.ExampleData ExampleData = 1;
inline int Table::_internal_exampledata_size() const {
  return _impl_.exampledata_.size();
}
inline int Table::exampledata_size() const {
  return _internal_exampledata_size();
}
inline void Table::clear_exampledata() {
  _impl_.exampledata_.Clear();
}
inline ::desc::ExampleData* Table::mutable_exampledata(int index) {
  // @@protoc_insertion_point(field_mutable:desc.Table.ExampleData)
  return _impl_.exampledata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleData >*
Table::mutable_exampledata() {
  // @@protoc_insertion_point(field_mutable_list:desc.Table.ExampleData)
  return &_impl_.exampledata_;
}
inline const ::desc::ExampleData& Table::_internal_exampledata(int index) const {
  return _impl_.exampledata_.Get(index);
}
inline const ::desc::ExampleData& Table::exampledata(int index) const {
  // @@protoc_insertion_point(field_get:desc.Table.ExampleData)
  return _internal_exampledata(index);
}
inline ::desc::ExampleData* Table::_internal_add_exampledata() {
  return _impl_.exampledata_.Add();
}
inline ::desc::ExampleData* Table::add_exampledata() {
  ::desc::ExampleData* _add = _internal_add_exampledata();
  // @@protoc_insertion_point(field_add:desc.Table.ExampleData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleData >&
Table::exampledata() const {
  // @@protoc_insertion_point(field_list:desc.Table.ExampleData)
  return _impl_.exampledata_;
}

// repeated .desc.ExtendData ExtendData = 2;
inline int Table::_internal_extenddata_size() const {
  return _impl_.extenddata_.size();
}
inline int Table::extenddata_size() const {
  return _internal_extenddata_size();
}
inline void Table::clear_extenddata() {
  _impl_.extenddata_.Clear();
}
inline ::desc::ExtendData* Table::mutable_extenddata(int index) {
  // @@protoc_insertion_point(field_mutable:desc.Table.ExtendData)
  return _impl_.extenddata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExtendData >*
Table::mutable_extenddata() {
  // @@protoc_insertion_point(field_mutable_list:desc.Table.ExtendData)
  return &_impl_.extenddata_;
}
inline const ::desc::ExtendData& Table::_internal_extenddata(int index) const {
  return _impl_.extenddata_.Get(index);
}
inline const ::desc::ExtendData& Table::extenddata(int index) const {
  // @@protoc_insertion_point(field_get:desc.Table.ExtendData)
  return _internal_extenddata(index);
}
inline ::desc::ExtendData* Table::_internal_add_extenddata() {
  return _impl_.extenddata_.Add();
}
inline ::desc::ExtendData* Table::add_extenddata() {
  ::desc::ExtendData* _add = _internal_add_extenddata();
  // @@protoc_insertion_point(field_add:desc.Table.ExtendData)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExtendData >&
Table::extenddata() const {
  // @@protoc_insertion_point(field_list:desc.Table.ExtendData)
  return _impl_.extenddata_;
}

// repeated .desc.ExampleKV ExampleKV = 3;
inline int Table::_internal_examplekv_size() const {
  return _impl_.examplekv_.size();
}
inline int Table::examplekv_size() const {
  return _internal_examplekv_size();
}
inline void Table::clear_examplekv() {
  _impl_.examplekv_.Clear();
}
inline ::desc::ExampleKV* Table::mutable_examplekv(int index) {
  // @@protoc_insertion_point(field_mutable:desc.Table.ExampleKV)
  return _impl_.examplekv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleKV >*
Table::mutable_examplekv() {
  // @@protoc_insertion_point(field_mutable_list:desc.Table.ExampleKV)
  return &_impl_.examplekv_;
}
inline const ::desc::ExampleKV& Table::_internal_examplekv(int index) const {
  return _impl_.examplekv_.Get(index);
}
inline const ::desc::ExampleKV& Table::examplekv(int index) const {
  // @@protoc_insertion_point(field_get:desc.Table.ExampleKV)
  return _internal_examplekv(index);
}
inline ::desc::ExampleKV* Table::_internal_add_examplekv() {
  return _impl_.examplekv_.Add();
}
inline ::desc::ExampleKV* Table::add_examplekv() {
  ::desc::ExampleKV* _add = _internal_add_examplekv();
  // @@protoc_insertion_point(field_add:desc.Table.ExampleKV)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::desc::ExampleKV >&
Table::examplekv() const {
  // @@protoc_insertion_point(field_list:desc.Table.ExampleKV)
  return _impl_.examplekv_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace desc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::desc::ActorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::desc::ActorType>() {
  return ::desc::ActorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_desc_2fdesc_2eproto
